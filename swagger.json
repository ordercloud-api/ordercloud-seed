{
    "openapi": "3.0.0",
    "info": {
        "title": "OrderCloud",
        "description": "OrderCloud is an awesome C# platform API for making eCommerce applications. It is NOT a complete solution. It's designed to be used as the backend component with various other integrations and services.",
        "version": "1.0.260.26968",
        "contact": {
            "name": "OrderCloud",
            "url": "http://ordercloud.io",
            "email": "ordercloud@four51.com"
        }
    },
    "servers": [
        {
            "url": "https://api.ordercloud.io/v1",
            "description": "Main API Server (OrderCloud resources requiring an access token)"
        }
    ],
    "tags": [
        {
            "name": "Authentication and Authorization",
            "description": "The OrderCloud.io API implements OAuth2 combined with our own notion of Roles to control user authentication and authorization at fine-grain level. Be prepared to spend time learning about these concepts and designing the right model for your application. If you over-privilege your users and attempt to control what they can do via front-end code, you run the risk of technically savvy users circumventing this by making direct API calls.",
            "x-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Security Profiles",
            "description": "",
            "x-section-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Forgotten Password",
            "description": "",
            "x-section-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Impersonation Configs",
            "description": "ImpersonationConfigs allow users to make API calls on behalf of a buyer user, which we refer to as impersonation.\nIf you're a marketplace owner user with the BuyerImpersonation role you can impersonate any buyer user under your organization as long as an applicable Impersonation Config has been created.\nIf you're a buyer user with the BuyerImpersonation role you can impersonate any other buyer user within the same buyer company as long as an applicable Impersonation Config has been created.",
            "x-section-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Certs",
            "description": "",
            "x-section-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Open Id Connects",
            "description": "",
            "x-section-id": "AuthenticationAndAuthorization"
        },
        {
            "name": "Seller",
            "description": "At the center of any OrderCloud.io solution is a single Seller organization. It consists directly of Users, Groups, and Addresses (used mainly for shipping calculations), which should be established ahead of Product Catalogs, Buyers, and Suppliers.",
            "x-id": "Seller"
        },
        {
            "name": "Admin Users",
            "description": "Users on an Organization level are users that have administrative access to things like adding users, creating catalogs, processing orders or creating products. These users are not specific to a buyer company.",
            "x-section-id": "Seller"
        },
        {
            "name": "Admin User Groups",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Admin Addresses",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Message Senders",
            "description": "MessageSenders enable the delivery of event driven notifications to users. Each MessageSender handles a group of predefined MessageTypes, which can be assigned to the parties that should receive those emails.",
            "x-section-id": "Seller"
        },
        {
            "name": "Api Clients",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Incrementors",
            "description": "An incrementor is used to add an atomically incremented number to your object IDs. For example, \"aprefix-{myIncrementorID}\", will yield an order ID of aprefix-10010.",
            "x-section-id": "Seller"
        },
        {
            "name": "Integration Events",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Locales",
            "description": "Locales are used to facilitate multi-currency product pricing and ordering in a marketplace. They can be assigned to Buyers or Buyer UserGroups.Duplicate Currency/Language combinations not permitted.",
            "x-section-id": "Seller"
        },
        {
            "name": "Webhooks",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Xp Indices",
            "description": "",
            "x-section-id": "Seller"
        },
        {
            "name": "Buyers",
            "description": "Buyers represent real-world legal entities to which the Seller offers Product Catalogs and from which the Seller receives Orders. Buyers contain many of the same things as Sellers (Users, Groups, Addresses) and much more, including Cost Centers, Spending Accounts, and Approval Rules.\nAssignments are prevalent concept. Most \"things\" can be assigned to a User, Group, or entire Buyer organization. Plan ahead, and use Groups to your advantage here. For example, if you assign 100 Addresses directly to 50 Users, you are going to need to create 100 additional assignments every time you add a new User. Or, 50 more assignments for every new Address. With careful planning, Groups can save you from \"assignment hell\".",
            "x-id": "Buyers"
        },
        {
            "name": "Buyers",
            "description": "Buyers, or customers, are the organizations that view the categories and products and place orders.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Users",
            "description": "A user is a person with access to the application.  The properties of a user define who they are and what they are able to do with their login to the application.",
            "x-section-id": "Buyers"
        },
        {
            "name": "User Groups",
            "description": "User Groups are used to streamline the management of users within an application.  By placing like users in groups, you can filter content, define order management rules, and manage changes much more easily than trying to account for individual users.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Addresses",
            "description": "Addresses are used for the purposes of billing and shipping an order.  An address may belong to a list that can be shared among many users if appropriate.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Cost Centers",
            "description": "A cost center is used to allocate organizational expenditures.  Different businesses call these by different names such as \"allocation codes\" or \"charge back codes\", but the basic purpose is the same - to allocate an expense back to someone or some department of an organization.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Credit Cards",
            "description": "Credit cards are used as a payment method for an order.  A user may have access to one or many credit cards for personal spend or group spending.\nCredit Cards may be saved and assigned to members of an organization for use during purchase.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Spending Accounts",
            "description": "Spending Accounts are funds given to users by a managing entity and are managed as part of a user's account.  These funds are generally used as \"corporate dollars\", \"rewards dollars\", or \"gift cards\".\nThey can be used to pay for all of or part of an order with parameters that control account expiration, balance available, balance renewal, user access and overdraft.\nMultiple spending accounts can be assigned to a member of an organization and applied to all transactions, but only one can be used as a payment method.\nWhen multiple Spending Accounts are used on a transaction each is deducted individually.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Approval Rules",
            "description": "Approval rules are used to verify the integrity of an order.  Common examples include orders requiring managerial approval, approval for orders that contain a specific product category, approval for quantity thresholds or approval for orders that exceed a specific price.  Properties are also available to control the triggers and timing for processing approvals whether parallel to another rule, or in succession of a previous rule.",
            "x-section-id": "Buyers"
        },
        {
            "name": "Suppliers",
            "description": "Suppliers are a third, optional type of organization used in indirect supply chain scenarios. Like the Seller, they contain Users and Groups. Once established, Products can be configured to auto-forward to Suppliers when ordered. This will automatically create a new PO, notify the Supplier, and track costs and profit margins if configured.",
            "x-id": "Suppliers"
        },
        {
            "name": "Suppliers",
            "description": "Suppliers can own, supply, and/or distribute products within the marketplace.",
            "x-section-id": "Suppliers"
        },
        {
            "name": "Supplier Users",
            "description": "A user is a person with access to the application.  The properties of a user define who they are and what they are able to do with their login to the application.",
            "x-section-id": "Suppliers"
        },
        {
            "name": "Supplier User Groups",
            "description": "User Groups are used to streamline the management of users within an application.  By placing like users in groups, you can filter content, define order management rules, and manage changes much more easily than trying to account for individual users.",
            "x-section-id": "Suppliers"
        },
        {
            "name": "Supplier Addresses",
            "description": "",
            "x-section-id": "Suppliers"
        },
        {
            "name": "Product Catalogs",
            "description": "Products are priced (or unpriced) goods that can be offered to Buyers for placement on Orders. A Product can belong to any number of Catalogs, and a Catalog can be organized into hierarchical Categories to any arbitrary depth. Catalogs are assigned to Buyers, though visibility and pricing may vary by Buyer, User Group, Category, or individual Product. Pricing may include quantity breaks (collectively called a Price Schedule), and Price Schedules may be shared with multiple Products. User-selected Specs, which may include price markups, can be assigned to Products, enabling Buyer configurability at the time of ordering.",
            "x-id": "ProductCatalogs"
        },
        {
            "name": "Catalogs",
            "description": "A Catalog represents a group of categories used to group and place content for a specific audience. All buyers are issued and assigned a default catalog upon creation. Catalogs can be shared between buyers using assignments.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Categories",
            "description": "Categories are used within a catalog to group and place content for a specific audience. Content can be in the form of another category, nested categories, products or HTML.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Products",
            "description": "A Product represents a physical, digital, or abstract good that is offered for sale by a Marketplace Owner or Supplier and is purchase-able by Buyer Users via an Order.\nProducts can be a static SKU or a version of a static SKU, known as a Variant.  For example, a variant is often a size or color choice that drives a different product SKU.\nProducts may also have inventory associated with them and various inventory attributes like quantity available and re-order notifications.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Price Schedules",
            "description": "Price schedules allow the same product to be sold across multiple channels.  A price schedule may include quantity price breaks, min and max quantity per order, whether to apply tax or shipping calculations, or to what type of order the price schedule applies.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Specs",
            "description": "Specs are used to capture user input when adding a Product to an Order. At its simplest, a spec is a name/value pair. A spec value may have a price markup or markdown associated with it. In more advanced scenarios, specs can drive the product SKU. For example, a product may be available in 3 colors and 3 sizes and therefore have a total of 9 SKUs. **The OrderCloud platform will choose the correct SKU based on the user-selected color and size specs**.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Product Facets",
            "description": "A product facet is an extended property (value on product.xp) designated to participate in faceted navigation. Buyer list endpoints for products will populate and return Meta.Facets, a collection of facet names, values, and counts. Counts represent the total results that would be returned should the current set be further filtered on that facet value.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Inventory Records",
            "description": "Inventory Records represent physical locations where inventory for a given product exists. Use of Inventory Records will prevent writing to Product.Inventory.QuantityAvailable, which will instead be a sum of inventories across all locations associated to the product.",
            "x-section-id": "ProductCatalogs"
        },
        {
            "name": "Orders and Fulfillment",
            "description": "The central concept within OrderCloud.io is (not surprisingly) the Order. This is where Buyers, Sellers, Products, Addresses, and just about everything else come together to form business transactions. A feature that is somewhat unique to this area of the API is that you'll use the same set of endpoints regardless of whether you're a Buyer, Seller, or Supplier. What's important is the order *direction*, which is either incoming or outgoing. Order IDs are guaranteed unique within that context. As a seller, this means you can aggregate lists of incoming orders from many Buyers, or outgoing orders to many Suppliers. You may filter a list by Buyer or Supplier, but it's not required to uniquely identify an Order. (Buyers typically only deal with outgoing Orders; Suppliers with incoming.) Buyers add Line Items to Orders by specifying a Product, Quantity, and (optionally) Spec values. Shipping is applied at either the Order level or Line Item level. Shipments are independent of Orders; you can ship a partial Order, or aggregate items from multiple Orders onto a single Shipment.",
            "x-id": "OrdersAndFulfillment"
        },
        {
            "name": "Orders",
            "description": "An Order represents a business transaction between two parties. It typically consists of a collection of Line Items, a Payment Method, Tax and Shipping information, etc. The OrderCloud platform defines various \"actions\" that can be performed against Orders, such as Submit, Approve, Ship, etc. These actions transform the state of the order and often trigger external events such as financial transactions.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Cart",
            "description": "A Cart is a straightforward way for a buyer user to interact with an order prior to submit. Unlike Order endpoints, an OrderID is never needed to interact with a cart. This simplifies workflows and eliminates the need to keep track of the OrderID on the front end. Please note Cart should be used as a distinct alternative to Order endpoints for a buyer user during the shopping experience; combining the use of Cart endpoints with Order endpoints may have unexpected results, and is not supported. Only available to Buyer Users.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Line Items",
            "description": "A Line Item represents a single line on an Order. At a minimum, it contains a single Product SKU and a quantity. A line item may also include Spec values, a Cost Center, shipping details, date needed, and other custom information.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Promotions",
            "description": "Promotions are used to reduce the cost of a line item or an order.  Promotions can have redemption rules that can be applied for available dates, occurences and value.\nPromotions can be assigned to Products, Categories, Buyers, UserGroups and Users for redemption.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Payments",
            "description": "",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Shipments",
            "description": "A Shipment is a grouping of one or more Line Items from one or more Orders that is physically packaged and delivered to the Buyer as a single unit. It is typically created by the Marketplace Owner after the Order is submitted as part of the fulfillment process.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Order Returns",
            "description": "An OrderReturn represents a transaction between two parties. It can be a record of physical items being returned, or simply a credit being issued not tied to the return of an item.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Seller Approval Rules",
            "description": "Order return approval rules are used to verify the integrity of an order return. Common examples include order returns exceeding a specified refund amount or order returns that contain no physical items to return. Properties are also available to control the triggers and timing for processing approvals whether parallel to another rule, or in succession of a previous rule.",
            "x-section-id": "OrdersAndFulfillment"
        },
        {
            "name": "Me and My Stuff",
            "description": "With an understanding of the robust visibility options involving roles, group-level assignments, Buyer-specific pricing, \"Active\" bits, and the like, you might be wondering, where are all these rules actually enforced? This is the job of the resources that begin with \"me\". Whether authenticated as yourself or impersonating as someone else, you see only what that user is allowed to see. A good rule of thumb is that, other than authentication, you should be able to build an entire Buyer experience using only endpoints that start with \"orders\" or \"me\".",
            "x-id": "MeAndMyStuff"
        },
        {
            "name": "Me",
            "description": "\"Me\" is a container for read-only endpoints that return a filtered view of things that the current buyer user is allowed to see, i.e. things that they are assigned to either directly or as a member of a buyer organization or user group. It also provides ways for a user to update or change their own information.",
            "x-section-id": "MeAndMyStuff"
        }
    ],
    "components": {
        "securitySchemes": {
            "OAuth2": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "tokenUrl": "https://auth.ordercloud.io/oauth/token",
                        "scopes": {
                            "AddressAdmin": "",
                            "AddressReader": "",
                            "AdminAddressAdmin": "",
                            "AdminAddressReader": "",
                            "AdminUserAdmin": "",
                            "AdminUserGroupAdmin": "",
                            "AdminUserGroupReader": "",
                            "AdminUserReader": "",
                            "ApiClientAdmin": "",
                            "ApiClientReader": "",
                            "ApprovalRuleAdmin": "",
                            "ApprovalRuleReader": "",
                            "BuyerAdmin": "",
                            "BuyerImpersonation": "",
                            "BuyerReader": "",
                            "BuyerUserAdmin": "",
                            "BuyerUserReader": "",
                            "CatalogAdmin": "",
                            "CatalogReader": "",
                            "CategoryAdmin": "",
                            "CategoryReader": "",
                            "CostCenterAdmin": "",
                            "CostCenterReader": "",
                            "CreditCardAdmin": "",
                            "CreditCardReader": "",
                            "FullAccess": "",
                            "IncrementorAdmin": "",
                            "IncrementorReader": "",
                            "IntegrationEventAdmin": "",
                            "IntegrationEventReader": "",
                            "LocaleAdmin": "",
                            "LocaleReader": "",
                            "MeAddressAdmin": "",
                            "MeAdmin": "",
                            "MeCreditCardAdmin": "",
                            "MessageConfigAssignmentAdmin": "",
                            "MessageSenderAdmin": "",
                            "MessageSenderReader": "",
                            "MeXpAdmin": "",
                            "OrderAdmin": "",
                            "OrderReader": "",
                            "OverrideShipping": "",
                            "OverrideTax": "",
                            "OverrideUnitPrice": "",
                            "PasswordReset": "",
                            "PriceScheduleAdmin": "",
                            "PriceScheduleReader": "",
                            "ProductAdmin": "",
                            "ProductAssignmentAdmin": "",
                            "ProductFacetAdmin": "",
                            "ProductFacetReader": "",
                            "ProductReader": "",
                            "PromotionAdmin": "",
                            "PromotionReader": "",
                            "SecurityProfileAdmin": "",
                            "SecurityProfileReader": "",
                            "SetSecurityProfile": "",
                            "ShipmentAdmin": "",
                            "ShipmentReader": "",
                            "Shopper": "",
                            "SpendingAccountAdmin": "",
                            "SpendingAccountReader": "",
                            "SupplierAddressAdmin": "",
                            "SupplierAddressReader": "",
                            "SupplierAdmin": "",
                            "SupplierReader": "",
                            "SupplierUserAdmin": "",
                            "SupplierUserGroupAdmin": "",
                            "SupplierUserGroupReader": "",
                            "SupplierUserReader": "",
                            "UnsubmittedOrderReader": "",
                            "UserGroupAdmin": "",
                            "UserGroupReader": "",
                            "WebhookAdmin": "",
                            "WebhookReader": "",
                            "XpIndexAdmin": ""
                        }
                    },
                    "clientCredentials": {
                        "tokenUrl": "https://auth.ordercloud.io/oauth/token",
                        "scopes": {
                            "AddressAdmin": "",
                            "AddressReader": "",
                            "AdminAddressAdmin": "",
                            "AdminAddressReader": "",
                            "AdminUserAdmin": "",
                            "AdminUserGroupAdmin": "",
                            "AdminUserGroupReader": "",
                            "AdminUserReader": "",
                            "ApiClientAdmin": "",
                            "ApiClientReader": "",
                            "ApprovalRuleAdmin": "",
                            "ApprovalRuleReader": "",
                            "BuyerAdmin": "",
                            "BuyerImpersonation": "",
                            "BuyerReader": "",
                            "BuyerUserAdmin": "",
                            "BuyerUserReader": "",
                            "CatalogAdmin": "",
                            "CatalogReader": "",
                            "CategoryAdmin": "",
                            "CategoryReader": "",
                            "CostCenterAdmin": "",
                            "CostCenterReader": "",
                            "CreditCardAdmin": "",
                            "CreditCardReader": "",
                            "FullAccess": "",
                            "IncrementorAdmin": "",
                            "IncrementorReader": "",
                            "IntegrationEventAdmin": "",
                            "IntegrationEventReader": "",
                            "LocaleAdmin": "",
                            "LocaleReader": "",
                            "MeAddressAdmin": "",
                            "MeAdmin": "",
                            "MeCreditCardAdmin": "",
                            "MessageConfigAssignmentAdmin": "",
                            "MessageSenderAdmin": "",
                            "MessageSenderReader": "",
                            "MeXpAdmin": "",
                            "OrderAdmin": "",
                            "OrderReader": "",
                            "OverrideShipping": "",
                            "OverrideTax": "",
                            "OverrideUnitPrice": "",
                            "PasswordReset": "",
                            "PriceScheduleAdmin": "",
                            "PriceScheduleReader": "",
                            "ProductAdmin": "",
                            "ProductAssignmentAdmin": "",
                            "ProductFacetAdmin": "",
                            "ProductFacetReader": "",
                            "ProductReader": "",
                            "PromotionAdmin": "",
                            "PromotionReader": "",
                            "SecurityProfileAdmin": "",
                            "SecurityProfileReader": "",
                            "SetSecurityProfile": "",
                            "ShipmentAdmin": "",
                            "ShipmentReader": "",
                            "Shopper": "",
                            "SpendingAccountAdmin": "",
                            "SpendingAccountReader": "",
                            "SupplierAddressAdmin": "",
                            "SupplierAddressReader": "",
                            "SupplierAdmin": "",
                            "SupplierReader": "",
                            "SupplierUserAdmin": "",
                            "SupplierUserGroupAdmin": "",
                            "SupplierUserGroupReader": "",
                            "SupplierUserReader": "",
                            "UnsubmittedOrderReader": "",
                            "UserGroupAdmin": "",
                            "UserGroupReader": "",
                            "WebhookAdmin": "",
                            "WebhookReader": "",
                            "XpIndexAdmin": ""
                        }
                    }
                }
            }
        },
        "schemas": {
            "AccessToken": {
                "type": "object",
                "example": {
                    "access_token": "",
                    "expires_in": 0,
                    "token_type": "",
                    "refresh_token": ""
                },
                "properties": {
                    "access_token": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "token_type": {
                        "type": "string"
                    },
                    "refresh_token": {
                        "type": "string"
                    }
                }
            },
            "AccessTokenBasic": {
                "type": "object",
                "example": {
                    "access_token": ""
                },
                "properties": {
                    "access_token": {
                        "type": "string"
                    }
                }
            },
            "Address": {
                "type": "object",
                "example": {
                    "ID": "",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "CompanyName": "",
                    "FirstName": "",
                    "LastName": "",
                    "Street1": "",
                    "Street2": "",
                    "City": "",
                    "State": "",
                    "Zip": "",
                    "Country": "",
                    "Phone": "",
                    "AddressName": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "CompanyName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "FirstName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LastName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Street1": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Street2": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "City": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "State": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Zip": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Country": {
                        "type": "string",
                        "maxLength": 2
                    },
                    "Phone": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "AddressName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "AddressAssignment": {
                "type": "object",
                "example": {
                    "AddressID": "",
                    "UserID": "",
                    "UserGroupID": "",
                    "IsShipping": false,
                    "IsBilling": false
                },
                "properties": {
                    "AddressID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "IsShipping": {
                        "type": "boolean"
                    },
                    "IsBilling": {
                        "type": "boolean"
                    }
                }
            },
            "AdHocProduct": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "QuantityMultiplier": 0,
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "DefaultSupplierID": "",
                    "Returnable": false,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "QuantityMultiplier": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "description": "Informational only, does not influence any OrderCloud behavior. Used to indicate an amount per Quantity.",
                        "minimum": 1
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "DefaultSupplierID": {
                        "type": "string",
                        "description": "If this property has a value and a SupplierID isn't explicitly passed when creating a LineItem, this SupplierID will be used."
                    },
                    "Returnable": {
                        "type": "boolean",
                        "description": "If true, all suppliers are eligible to opt into selling this product."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ApiClient": {
                "type": "object",
                "example": {
                    "ID": "",
                    "ClientSecret": "",
                    "AccessTokenDuration": 0,
                    "Active": false,
                    "AppName": "",
                    "RefreshTokenDuration": 0,
                    "DefaultContextUserName": "",
                    "xp": {},
                    "AllowAnyBuyer": false,
                    "AllowAnySupplier": false,
                    "AllowSeller": false,
                    "IsAnonBuyer": false,
                    "AssignedBuyerCount": 0,
                    "AssignedSupplierCount": 0,
                    "OrderCheckoutIntegrationEventID": "",
                    "OrderCheckoutIntegrationEventName": "",
                    "OrderReturnIntegrationEventID": "",
                    "OrderReturnIntegrationEventName": "",
                    "AddToCartIntegrationEventID": "",
                    "AddToCartIntegrationEventName": "",
                    "MinimumRequiredRoles": [
                        "ApiClientAdmin"
                    ],
                    "MinimumRequiredCustomRoles": [
                        ""
                    ],
                    "MaximumGrantedRoles": [
                        "ApiClientAdmin"
                    ],
                    "MaximumGrantedCustomRoles": [
                        ""
                    ]
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Used for OAuth 2.0 workflows and OrderCloud impersonation to represent this Client Application."
                    },
                    "ClientSecret": {
                        "type": "string",
                        "description": "Enables the OAuth 2.0 Client Credentials grant type. Required on all OAuth workflows when present."
                    },
                    "AccessTokenDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "All user authentication is prohibited if false."
                    },
                    "AppName": {
                        "type": "string"
                    },
                    "RefreshTokenDuration": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "DefaultContextUserName": {
                        "type": "string",
                        "description": "Optionally set a user that will be used when authenticating with a Client Credentials grant type flow. This grant type is often used for anonymous browsing on buyer applications and authentication on server integration layers."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "AllowAnyBuyer": {
                        "type": "boolean",
                        "description": "Allow all buyer users in your organization access to authenticate using this ApiClient."
                    },
                    "AllowAnySupplier": {
                        "type": "boolean",
                        "description": "Allow all supplier users in your organization access to authenticate using this ApiClient."
                    },
                    "AllowSeller": {
                        "type": "boolean",
                        "description": "Allow all marketplace owner users in your organization access to authenticate using this ApiClient."
                    },
                    "IsAnonBuyer": {
                        "type": "boolean",
                        "description": "Enables anonymous shopping. It only works when a Buyer User is the Default Context User."
                    },
                    "AssignedBuyerCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "AssignedSupplierCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "OrderCheckoutIntegrationEventID": {
                        "type": "string",
                        "description": "If populated, an error will be thrown when attempting to submit an order that has not been processed through the OrderCheckout Integration."
                    },
                    "OrderCheckoutIntegrationEventName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "OrderReturnIntegrationEventID": {
                        "type": "string",
                        "description": "If populated, and not overriden by an OrderAdmin, the integration event will be used to calculate ReturnAmount on the Order Return or each individual return item."
                    },
                    "OrderReturnIntegrationEventName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "AddToCartIntegrationEventID": {
                        "type": "string",
                        "description": "If populated, the integration event will be used to fetch product information from an external system, instead of an OrderCloud catalog, when a line item is added to an unsubmitted order."
                    },
                    "AddToCartIntegrationEventName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "MinimumRequiredRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        }
                    },
                    "MinimumRequiredCustomRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "MaximumGrantedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        }
                    },
                    "MaximumGrantedCustomRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ApiClientAssignment": {
                "type": "object",
                "example": {
                    "ApiClientID": "",
                    "BuyerID": "",
                    "SupplierID": ""
                },
                "properties": {
                    "ApiClientID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "SupplierID": {
                        "type": "string"
                    }
                }
            },
            "ApiRole": {
                "type": "string",
                "enum": [
                    "ApiClientAdmin",
                    "ApiClientReader",
                    "AddressAdmin",
                    "AddressReader",
                    "AdminAddressAdmin",
                    "AdminAddressReader",
                    "AdminUserAdmin",
                    "AdminUserGroupAdmin",
                    "AdminUserGroupReader",
                    "AdminUserReader",
                    "ApprovalRuleAdmin",
                    "ApprovalRuleReader",
                    "BuyerAdmin",
                    "BuyerImpersonation",
                    "BuyerReader",
                    "BuyerUserAdmin",
                    "BuyerUserReader",
                    "CatalogAdmin",
                    "CatalogReader",
                    "CategoryAdmin",
                    "CategoryReader",
                    "CostCenterAdmin",
                    "CostCenterReader",
                    "CreditCardAdmin",
                    "CreditCardReader",
                    "FullAccess",
                    "IncrementorAdmin",
                    "IncrementorReader",
                    "LocaleReader",
                    "LocaleAdmin",
                    "MeAddressAdmin",
                    "MeAdmin",
                    "MeCreditCardAdmin",
                    "MessageConfigAssignmentAdmin",
                    "MeXpAdmin",
                    "OrderAdmin",
                    "OrderReader",
                    "OverrideShipping",
                    "OverrideTax",
                    "OverrideUnitPrice",
                    "PasswordReset",
                    "PriceScheduleAdmin",
                    "PriceScheduleReader",
                    "ProductAdmin",
                    "ProductAssignmentAdmin",
                    "ProductFacetAdmin",
                    "ProductFacetReader",
                    "ProductReader",
                    "PromotionAdmin",
                    "PromotionReader",
                    "SecurityProfileAdmin",
                    "SecurityProfileReader",
                    "SetSecurityProfile",
                    "ShipmentAdmin",
                    "ShipmentReader",
                    "Shopper",
                    "SpendingAccountAdmin",
                    "SpendingAccountReader",
                    "SupplierAddressAdmin",
                    "SupplierAddressReader",
                    "SupplierAdmin",
                    "SupplierReader",
                    "SupplierUserAdmin",
                    "SupplierUserGroupAdmin",
                    "SupplierUserGroupReader",
                    "SupplierUserReader",
                    "UnsubmittedOrderReader",
                    "UserGroupAdmin",
                    "UserGroupReader",
                    "OpenIDConnectReader",
                    "OpenIDConnectAdmin",
                    "MessageSenderReader",
                    "MessageSenderAdmin",
                    "XpIndexAdmin",
                    "WebhookReader",
                    "WebhookAdmin",
                    "IntegrationEventReader",
                    "IntegrationEventAdmin"
                ],
                "description": ""
            },
            "ApprovalInfo": {
                "type": "object",
                "example": {
                    "Comments": ""
                },
                "properties": {
                    "Comments": {
                        "type": "string",
                        "description": "Comments to be saved with the order approval or denial.",
                        "maxLength": 2000
                    }
                }
            },
            "ApprovalRule": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "ApprovingGroupID": "",
                    "RuleExpression": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "ApprovingGroupID": {
                        "type": "string"
                    },
                    "RuleExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine an order requires approval. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ApprovalStatus": {
                "type": "string",
                "enum": [
                    "Pending",
                    "Approved",
                    "Declined"
                ],
                "description": ""
            },
            "ApprovalType": {
                "type": "string",
                "enum": [
                    "Order",
                    "OrderReturn"
                ],
                "description": ""
            },
            "Buyer": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "DefaultCatalogID": "",
                    "Active": false,
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "DefaultCatalogID": {
                        "type": "string",
                        "description": "If null on POST a new default catalog will be created for the buyer. Used in buyer product queries to allow filtering on categories without explicitly providing a CatalogID."
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, all authentication is prohibited."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "BuyerAddress": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Shipping": false,
                    "Billing": false,
                    "Editable": false,
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "CompanyName": "",
                    "FirstName": "",
                    "LastName": "",
                    "Street1": "",
                    "Street2": "",
                    "City": "",
                    "State": "",
                    "Zip": "",
                    "Country": "",
                    "Phone": "",
                    "AddressName": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 100
                    },
                    "Shipping": {
                        "type": "boolean",
                        "description": "Indicates whether this Address can be used as a Shipping Address on an Order or Line Item."
                    },
                    "Billing": {
                        "type": "boolean",
                        "description": "Indicates whether this Address can be used as a Billing Address on an Order."
                    },
                    "Editable": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Indicates whether this Address can be edited by the current User."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "CompanyName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "FirstName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LastName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Street1": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Street2": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "City": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "State": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Zip": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Country": {
                        "type": "string",
                        "maxLength": 2
                    },
                    "Phone": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "AddressName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "BuyerCreditCard": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Editable": false,
                    "Token": "",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "CardType": "",
                    "PartialAccountNumber": "",
                    "CardholderName": "",
                    "ExpirationDate": "2018-01-01T00:00:00-06:00",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 100
                    },
                    "Editable": {
                        "type": "boolean",
                        "readOnly": true
                    },
                    "Token": {
                        "type": "string",
                        "description": "Token provided by the credit card processor used to reference the card with that processor.",
                        "maxLength": 100
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "CardType": {
                        "type": "string"
                    },
                    "PartialAccountNumber": {
                        "type": "string",
                        "maxLength": 5
                    },
                    "CardholderName": {
                        "type": "string"
                    },
                    "ExpirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "BuyerProduct": {
                "type": "object",
                "example": {
                    "PriceSchedule": {
                        "OwnerID": "",
                        "ID": "",
                        "Name": "",
                        "ApplyTax": false,
                        "ApplyShipping": false,
                        "MinQuantity": 0,
                        "MaxQuantity": 0,
                        "UseCumulativeQuantity": false,
                        "RestrictedQuantity": false,
                        "PriceBreaks": [
                            {
                                "Quantity": 0,
                                "Price": 0,
                                "SalePrice": 0
                            }
                        ],
                        "Currency": "",
                        "SaleStart": "2018-01-01T00:00:00-06:00",
                        "SaleEnd": "2018-01-01T00:00:00-06:00",
                        "IsOnSale": false,
                        "xp": {}
                    },
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "QuantityMultiplier": 0,
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "Active": false,
                    "SpecCount": 0,
                    "VariantCount": 0,
                    "ShipFromAddressID": "",
                    "Inventory": {
                        "Enabled": false,
                        "NotificationPoint": 0,
                        "VariantLevelTracking": false,
                        "OrderCanExceed": false,
                        "QuantityAvailable": 0,
                        "LastUpdated": "2018-01-01T00:00:00-06:00"
                    },
                    "DefaultSupplierID": "",
                    "AllSuppliersCanSell": false,
                    "Returnable": false,
                    "xp": {}
                },
                "properties": {
                    "PriceSchedule": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PriceSchedule"
                            }
                        ],
                        "readOnly": true
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "QuantityMultiplier": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "description": "For reference only, does not influence any OrderCloud behavior. Used to indicate an amount per Quantity.",
                        "minimum": 1
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, product is not visible or purchasable from the Shopper perspective."
                    },
                    "SpecCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Count of Specs assigned to the product."
                    },
                    "VariantCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Count of Variants generated from the product/spec combinations."
                    },
                    "ShipFromAddressID": {
                        "type": "string",
                        "description": "Marketplace Owner or Supplier AddressID where the product will be shipped from. Can be used to calculate shipping costs."
                    },
                    "Inventory": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Inventory"
                            }
                        ]
                    },
                    "DefaultSupplierID": {
                        "type": "string",
                        "description": "If this property has a value and a SupplierID isn't explicitly passed when creating a LineItem, this SupplierID will be used."
                    },
                    "AllSuppliersCanSell": {
                        "type": "boolean",
                        "description": "If true, all suppliers are eligible to opt into selling this product."
                    },
                    "Returnable": {
                        "type": "boolean"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "BuyerSupplier": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    }
                }
            },
            "Catalog": {
                "type": "object",
                "example": {
                    "ID": "",
                    "OwnerID": "",
                    "Name": "",
                    "Description": "",
                    "Active": false,
                    "CategoryCount": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Catalog. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "Categories and Products within to this catalog will not be visible to buyer users if false."
                    },
                    "CategoryCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "CatalogAssignment": {
                "type": "object",
                "example": {
                    "CatalogID": "",
                    "BuyerID": "",
                    "ViewAllCategories": false,
                    "ViewAllProducts": false
                },
                "properties": {
                    "CatalogID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "ViewAllCategories": {
                        "type": "boolean"
                    },
                    "ViewAllProducts": {
                        "type": "boolean"
                    }
                }
            },
            "Category": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "ListOrder": 1,
                    "Active": false,
                    "ParentID": "",
                    "ChildCount": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "ListOrder": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Order that the category appears within its parent or catalog (if root level).",
                        "minimum": 0
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, buyers cannot see this Category or any Categories or Products under it."
                    },
                    "ParentID": {
                        "type": "string",
                        "description": "ID of the parent category."
                    },
                    "ChildCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Number of categories that are *immediate* children of this category."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "CategoryAssignment": {
                "type": "object",
                "example": {
                    "CategoryID": "",
                    "BuyerID": "",
                    "UserGroupID": "",
                    "Visible": false,
                    "ViewAllProducts": false
                },
                "properties": {
                    "CategoryID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "Visible": {
                        "type": "boolean",
                        "description": "Optional. Set to null to inherit from parent category or catalog level."
                    },
                    "ViewAllProducts": {
                        "type": "boolean",
                        "description": "Optional. Set to null to inherit from parent category or catalog level."
                    }
                }
            },
            "CategoryProductAssignment": {
                "type": "object",
                "example": {
                    "CategoryID": "",
                    "ProductID": "",
                    "ListOrder": 1
                },
                "properties": {
                    "CategoryID": {
                        "type": "string"
                    },
                    "ProductID": {
                        "type": "string"
                    },
                    "ListOrder": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "CommerceRole": {
                "type": "string",
                "enum": [
                    "Buyer",
                    "Seller",
                    "Supplier"
                ],
                "description": ""
            },
            "CostCenter": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "CostCenterAssignment": {
                "type": "object",
                "example": {
                    "CostCenterID": "",
                    "UserGroupID": ""
                },
                "properties": {
                    "CostCenterID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    }
                }
            },
            "CreditCard": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Token": "",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "CardType": "",
                    "PartialAccountNumber": "",
                    "CardholderName": "",
                    "ExpirationDate": "2018-01-01T00:00:00-06:00",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Token": {
                        "type": "string",
                        "description": "Token provided by the credit card processor used to reference the card with that processor.",
                        "maxLength": 100
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "CardType": {
                        "type": "string"
                    },
                    "PartialAccountNumber": {
                        "type": "string",
                        "maxLength": 5
                    },
                    "CardholderName": {
                        "type": "string"
                    },
                    "ExpirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "CreditCardAssignment": {
                "type": "object",
                "example": {
                    "CreditCardID": "",
                    "UserID": "",
                    "UserGroupID": ""
                },
                "properties": {
                    "CreditCardID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    }
                }
            },
            "ExtendedLineItem": {
                "type": "object",
                "example": {
                    "OrderID": "",
                    "Order": {
                        "ID": "",
                        "FromUser": {
                            "ID": "",
                            "CompanyID": "",
                            "Username": "",
                            "Password": "",
                            "FirstName": "",
                            "LastName": "",
                            "Email": "",
                            "Phone": "",
                            "TermsAccepted": "2018-01-01T00:00:00-06:00",
                            "Active": false,
                            "xp": {},
                            "AvailableRoles": [
                                ""
                            ],
                            "Locale": {
                                "ID": "",
                                "OwnerID": "",
                                "Currency": "",
                                "Language": ""
                            },
                            "DateCreated": "2018-01-01T00:00:00-06:00",
                            "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                        },
                        "FromCompanyID": "",
                        "ToCompanyID": "",
                        "FromUserID": "",
                        "BillingAddressID": "",
                        "BillingAddress": {
                            "ID": "",
                            "DateCreated": "2018-01-01T00:00:00-06:00",
                            "CompanyName": "",
                            "FirstName": "",
                            "LastName": "",
                            "Street1": "",
                            "Street2": "",
                            "City": "",
                            "State": "",
                            "Zip": "",
                            "Country": "",
                            "Phone": "",
                            "AddressName": "",
                            "xp": {}
                        },
                        "ShippingAddressID": "",
                        "Comments": "",
                        "LineItemCount": 0,
                        "Status": "Unsubmitted",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "DateSubmitted": "2018-01-01T00:00:00-06:00",
                        "DateApproved": "2018-01-01T00:00:00-06:00",
                        "DateDeclined": "2018-01-01T00:00:00-06:00",
                        "DateCanceled": "2018-01-01T00:00:00-06:00",
                        "DateCompleted": "2018-01-01T00:00:00-06:00",
                        "LastUpdated": "2018-01-01T00:00:00-06:00",
                        "Subtotal": 0,
                        "ShippingCost": 0,
                        "TaxCost": 0,
                        "PromotionDiscount": 0,
                        "Currency": "",
                        "Total": 0,
                        "IsSubmitted": false,
                        "xp": {}
                    },
                    "ID": "",
                    "ProductID": "",
                    "Quantity": 0,
                    "DateAdded": "2018-01-01T00:00:00-06:00",
                    "QuantityShipped": 0,
                    "UnitPrice": 0,
                    "PromotionDiscount": 0,
                    "LineTotal": 0,
                    "LineSubtotal": 0,
                    "CostCenter": "",
                    "DateNeeded": "2018-01-01T00:00:00-06:00",
                    "ShippingAccount": "",
                    "ShippingAddressID": "",
                    "ShipFromAddressID": "",
                    "Product": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "Returnable": false,
                        "QuantityMultiplier": 0,
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "DefaultSupplierID": "",
                        "xp": {}
                    },
                    "Variant": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "xp": {}
                    },
                    "ShippingAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "ShipFromAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "SupplierID": "",
                    "InventoryRecordID": "",
                    "PriceScheduleID": "",
                    "PriceOverridden": false,
                    "Specs": [
                        {
                            "SpecID": "",
                            "Name": "",
                            "OptionID": "",
                            "Value": "",
                            "PriceMarkupType": "NoMarkup",
                            "PriceMarkup": 0
                        }
                    ],
                    "xp": {}
                },
                "properties": {
                    "OrderID": {
                        "type": "string"
                    },
                    "Order": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Order"
                            }
                        ],
                        "description": "Returned only when include=Order (or include=Order.???) is provided in the query string."
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ProductID": {
                        "type": "string"
                    },
                    "Quantity": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "minimum": 1
                    },
                    "DateAdded": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "QuantityShipped": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Sum of QuantityShipped from all shipment items."
                    },
                    "UnitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Auto calculated Price per Quantity. Modification requires OverrideUnitPrice Role."
                    },
                    "PromotionDiscount": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all line item level promotion discount amounts applied."
                    },
                    "LineTotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "LineSubtotal - PromotionDiscount"
                    },
                    "LineSubtotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "UnitPrice x Quantity"
                    },
                    "CostCenter": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "DateNeeded": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ShippingAccount": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "ShippingAddressID": {
                        "type": "string"
                    },
                    "ShipFromAddressID": {
                        "type": "string",
                        "description": "Marketplace Owner or Supplier AddressID where the product will be shipped from. Can be used to calculate shipping costs."
                    },
                    "Product": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemProduct"
                            }
                        ],
                        "readOnly": true
                    },
                    "Variant": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemVariant"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShippingAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShipFromAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "SupplierID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "InventoryRecordID": {
                        "type": "string",
                        "description": "Inventory Record ID of which product inventory location to use. The Inventory Record ID cannot be modified once an order is submitted."
                    },
                    "PriceScheduleID": {
                        "type": "string",
                        "readOnly": true,
                        "description": "ID of the Price Schedule used to determine Unit price."
                    },
                    "PriceOverridden": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "If true, UnitPrice was overwritten."
                    },
                    "Specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItemSpec"
                        }
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ExtendedOrder": {
                "type": "object",
                "example": {
                    "LineItems": [
                        {
                            "ID": "",
                            "ProductID": "",
                            "Quantity": 0,
                            "DateAdded": "2018-01-01T00:00:00-06:00",
                            "QuantityShipped": 0,
                            "UnitPrice": 0,
                            "PromotionDiscount": 0,
                            "LineTotal": 0,
                            "LineSubtotal": 0,
                            "CostCenter": "",
                            "DateNeeded": "2018-01-01T00:00:00-06:00",
                            "ShippingAccount": "",
                            "ShippingAddressID": "",
                            "ShipFromAddressID": "",
                            "Product": {
                                "ID": "",
                                "Name": "",
                                "Description": "",
                                "Returnable": false,
                                "QuantityMultiplier": 0,
                                "ShipWeight": 0,
                                "ShipHeight": 0,
                                "ShipWidth": 0,
                                "ShipLength": 0,
                                "DefaultSupplierID": "",
                                "xp": {}
                            },
                            "Variant": {
                                "ID": "",
                                "Name": "",
                                "Description": "",
                                "ShipWeight": 0,
                                "ShipHeight": 0,
                                "ShipWidth": 0,
                                "ShipLength": 0,
                                "xp": {}
                            },
                            "ShippingAddress": {
                                "ID": "",
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "CompanyName": "",
                                "FirstName": "",
                                "LastName": "",
                                "Street1": "",
                                "Street2": "",
                                "City": "",
                                "State": "",
                                "Zip": "",
                                "Country": "",
                                "Phone": "",
                                "AddressName": "",
                                "xp": {}
                            },
                            "ShipFromAddress": {
                                "ID": "",
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "CompanyName": "",
                                "FirstName": "",
                                "LastName": "",
                                "Street1": "",
                                "Street2": "",
                                "City": "",
                                "State": "",
                                "Zip": "",
                                "Country": "",
                                "Phone": "",
                                "AddressName": "",
                                "xp": {}
                            },
                            "SupplierID": "",
                            "InventoryRecordID": "",
                            "PriceScheduleID": "",
                            "PriceOverridden": false,
                            "Specs": [
                                {
                                    "SpecID": "",
                                    "Name": "",
                                    "OptionID": "",
                                    "Value": "",
                                    "PriceMarkupType": "NoMarkup",
                                    "PriceMarkup": 0
                                }
                            ],
                            "xp": {}
                        }
                    ],
                    "ID": "",
                    "FromUser": {
                        "ID": "",
                        "CompanyID": "",
                        "Username": "",
                        "Password": "",
                        "FirstName": "",
                        "LastName": "",
                        "Email": "",
                        "Phone": "",
                        "TermsAccepted": "2018-01-01T00:00:00-06:00",
                        "Active": false,
                        "xp": {},
                        "AvailableRoles": [
                            ""
                        ],
                        "Locale": {
                            "ID": "",
                            "OwnerID": "",
                            "Currency": "",
                            "Language": ""
                        },
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                    },
                    "FromCompanyID": "",
                    "ToCompanyID": "",
                    "FromUserID": "",
                    "BillingAddressID": "",
                    "BillingAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "ShippingAddressID": "",
                    "Comments": "",
                    "LineItemCount": 0,
                    "Status": "Unsubmitted",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "DateSubmitted": "2018-01-01T00:00:00-06:00",
                    "DateApproved": "2018-01-01T00:00:00-06:00",
                    "DateDeclined": "2018-01-01T00:00:00-06:00",
                    "DateCanceled": "2018-01-01T00:00:00-06:00",
                    "DateCompleted": "2018-01-01T00:00:00-06:00",
                    "LastUpdated": "2018-01-01T00:00:00-06:00",
                    "Subtotal": 0,
                    "ShippingCost": 0,
                    "TaxCost": 0,
                    "PromotionDiscount": 0,
                    "Currency": "",
                    "Total": 0,
                    "IsSubmitted": false,
                    "xp": {}
                },
                "properties": {
                    "LineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        }
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "FromUser": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "readOnly": true,
                        "description": "User placing the order."
                    },
                    "FromCompanyID": {
                        "type": "string",
                        "description": "ID of the Buyer or Marketplace Owner placing the order. Mainly useful to the Marketplace Owner or Supplier receiving it."
                    },
                    "ToCompanyID": {
                        "type": "string",
                        "description": "ID of the Marketplace Owner or Supplier receiving the order, only writable on create. Mainly useful to the user placing it."
                    },
                    "FromUserID": {
                        "type": "string",
                        "description": "This property is only writable when creating an order on behalf of a buyer user."
                    },
                    "BillingAddressID": {
                        "type": "string"
                    },
                    "BillingAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShippingAddressID": {
                        "type": "string",
                        "description": "ID of the Shipping Address for all LineItems on the Order. Null when there are multiple Shipping Addresses involved."
                    },
                    "Comments": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "LineItemCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "Status": {
                        "$ref": "#/components/schemas/OrderStatus",
                        "readOnly": true
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateSubmitted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "NULL until the order passes from the buyer to the Marketplace Owner, including when Status is PendingApproval."
                    },
                    "DateApproved": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateDeclined": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCanceled": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Populated when all items on an order have shipped, or the order is explicitly completed."
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "Subtotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all LineItem.LineSubtotals."
                    },
                    "ShippingCost": {
                        "type": "number",
                        "format": "float",
                        "description": "Modifying requires OverrideShipping Role."
                    },
                    "TaxCost": {
                        "type": "number",
                        "format": "float",
                        "description": "Modifying requires TaxOverride Role."
                    },
                    "PromotionDiscount": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all Promotion.Amounts applied to the order."
                    },
                    "Currency": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Inherited from the user placing the order."
                    },
                    "Total": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Subtotal + TaxCost + ShippingCost - PromotionDiscount"
                    },
                    "IsSubmitted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "True if this Order has been passed from the Buyer to the Marketplace Owner."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ImpersonateTokenRequest": {
                "type": "object",
                "example": {
                    "ClientID": "",
                    "Roles": [
                        "ApiClientAdmin"
                    ],
                    "CustomRoles": [
                        ""
                    ]
                },
                "properties": {
                    "ClientID": {
                        "type": "string"
                    },
                    "Roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        }
                    },
                    "CustomRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ImpersonationConfig": {
                "type": "object",
                "example": {
                    "ID": "",
                    "ImpersonationBuyerID": "",
                    "ImpersonationGroupID": "",
                    "ImpersonationUserID": "",
                    "BuyerID": "",
                    "GroupID": "",
                    "UserID": "",
                    "SecurityProfileID": "",
                    "ClientID": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ImpersonationBuyerID": {
                        "type": "string",
                        "description": "The Buyer ID of the impersonator group or user (party doing the impersonating)"
                    },
                    "ImpersonationGroupID": {
                        "type": "string",
                        "description": "The UserGroupID of the impersonator (party doing the impersonating)"
                    },
                    "ImpersonationUserID": {
                        "type": "string",
                        "description": "The UserID of the impersonator (party doing the impersonating)"
                    },
                    "BuyerID": {
                        "type": "string",
                        "description": "The BuyerID of the impersonatee (party being impersonated)"
                    },
                    "GroupID": {
                        "type": "string",
                        "description": "The UserGroupID of the impersonatee (party being impersonated)"
                    },
                    "UserID": {
                        "type": "string",
                        "description": "The UserID of the impersonatee (party being impersonated)"
                    },
                    "SecurityProfileID": {
                        "type": "string"
                    },
                    "ClientID": {
                        "type": "string"
                    }
                }
            },
            "Incrementor": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "LastNumber": 0,
                    "LeftPaddingCount": 0
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "description": "The string \"{replace-with-incrementor-ID}\" can be passed into any ID field to populate the next ID in the sequence. It can also be prefixed with other ID safe characters.",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LastNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Increments as IDs are generated."
                    },
                    "LeftPaddingCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Use to enforce a minimum incrementor ID length. For example if your LastNumber is 0 and LeftPaddingCount is 4, your first generated ID will be 0001."
                    }
                }
            },
            "IntegrationEvent": {
                "type": "object",
                "example": {
                    "ElevatedRoles": [
                        "ApiClientAdmin"
                    ],
                    "ID": "",
                    "ConfigData": {},
                    "EventType": "OrderCheckout",
                    "CustomImplementationUrl": "",
                    "Name": "",
                    "HashKey": ""
                },
                "properties": {
                    "ElevatedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        }
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ConfigData": {
                        "type": "object",
                        "description": "Any additional data needed for your Integration Event should be included here."
                    },
                    "EventType": {
                        "$ref": "#/components/schemas/IntegrationEventType"
                    },
                    "CustomImplementationUrl": {
                        "type": "string",
                        "description": "URL the IntegrationEvent will POST data to, likely a route within your middleware."
                    },
                    "Name": {
                        "type": "string"
                    },
                    "HashKey": {
                        "type": "string",
                        "description": "Security feature that allows your middleware to verify the digital signature in the request header to ensure you only accept trusted data.",
                        "maxLength": 50
                    }
                }
            },
            "IntegrationEventType": {
                "type": "string",
                "enum": [
                    "OrderCheckout",
                    "OpenIDConnect",
                    "OrderReturn",
                    "AddToCart"
                ],
                "description": ""
            },
            "Inventory": {
                "type": "object",
                "example": {
                    "Enabled": false,
                    "NotificationPoint": 0,
                    "VariantLevelTracking": false,
                    "OrderCanExceed": false,
                    "QuantityAvailable": 0,
                    "LastUpdated": "2018-01-01T00:00:00-06:00"
                },
                "properties": {
                    "Enabled": {
                        "type": "boolean",
                        "description": "If true, inventory will be tracked and enforced."
                    },
                    "NotificationPoint": {
                        "type": "integer",
                        "format": "int32",
                        "description": "For reference only, does not influence any OrderCloud behavior at this time."
                    },
                    "VariantLevelTracking": {
                        "type": "boolean",
                        "description": "If true, QuantityAvailable will be determined at the Variant level."
                    },
                    "OrderCanExceed": {
                        "type": "boolean",
                        "description": "If true, a user can create line items and place orders for the product even if there is insufficient QuantityAvailable."
                    },
                    "QuantityAvailable": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Automatically decrements on order submit. If you utilize InventoryRecords either at the product or variant level, this property becomes readonly, and is derived from the sum of all QuantityAvailable of each InventoryRecord. If VariantLevelTracking is enabled, this is the sum of all variant quantities, so the value may not be very useful beyond using it to filter out products with no variant level inventory available."
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "InventoryRecord": {
                "type": "object",
                "example": {
                    "ID": "",
                    "OwnerID": "",
                    "Address": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "AddressID": "",
                    "OrderCanExceed": false,
                    "QuantityAvailable": 0,
                    "LastUpdated": "2018-01-01T00:00:00-06:00",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "OwnerID": {
                        "type": "string"
                    },
                    "Address": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "AddressID": {
                        "type": "string",
                        "description": "Since an InventoryRecord represents a physical location where inventory for a given product exists, AddressID is required."
                    },
                    "OrderCanExceed": {
                        "type": "boolean"
                    },
                    "QuantityAvailable": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "LineItem": {
                "type": "object",
                "example": {
                    "ID": "",
                    "ProductID": "",
                    "Quantity": 0,
                    "DateAdded": "2018-01-01T00:00:00-06:00",
                    "QuantityShipped": 0,
                    "UnitPrice": 0,
                    "PromotionDiscount": 0,
                    "LineTotal": 0,
                    "LineSubtotal": 0,
                    "CostCenter": "",
                    "DateNeeded": "2018-01-01T00:00:00-06:00",
                    "ShippingAccount": "",
                    "ShippingAddressID": "",
                    "ShipFromAddressID": "",
                    "Product": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "Returnable": false,
                        "QuantityMultiplier": 0,
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "DefaultSupplierID": "",
                        "xp": {}
                    },
                    "Variant": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "xp": {}
                    },
                    "ShippingAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "ShipFromAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "SupplierID": "",
                    "InventoryRecordID": "",
                    "PriceScheduleID": "",
                    "PriceOverridden": false,
                    "Specs": [
                        {
                            "SpecID": "",
                            "Name": "",
                            "OptionID": "",
                            "Value": "",
                            "PriceMarkupType": "NoMarkup",
                            "PriceMarkup": 0
                        }
                    ],
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ProductID": {
                        "type": "string"
                    },
                    "Quantity": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "minimum": 1
                    },
                    "DateAdded": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "QuantityShipped": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Sum of QuantityShipped from all shipment items."
                    },
                    "UnitPrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Auto calculated Price per Quantity. Modification requires OverrideUnitPrice Role."
                    },
                    "PromotionDiscount": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all line item level promotion discount amounts applied."
                    },
                    "LineTotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "LineSubtotal - PromotionDiscount"
                    },
                    "LineSubtotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "UnitPrice x Quantity"
                    },
                    "CostCenter": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "DateNeeded": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ShippingAccount": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "ShippingAddressID": {
                        "type": "string"
                    },
                    "ShipFromAddressID": {
                        "type": "string",
                        "description": "Marketplace Owner or Supplier AddressID where the product will be shipped from. Can be used to calculate shipping costs."
                    },
                    "Product": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemProduct"
                            }
                        ],
                        "readOnly": true
                    },
                    "Variant": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemVariant"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShippingAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShipFromAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "SupplierID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "InventoryRecordID": {
                        "type": "string",
                        "description": "Inventory Record ID of which product inventory location to use. The Inventory Record ID cannot be modified once an order is submitted."
                    },
                    "PriceScheduleID": {
                        "type": "string",
                        "readOnly": true,
                        "description": "ID of the Price Schedule used to determine Unit price."
                    },
                    "PriceOverridden": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "If true, UnitPrice was overwritten."
                    },
                    "Specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItemSpec"
                        }
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "LineItemOverride": {
                "type": "object",
                "example": {
                    "LineItemID": "",
                    "UnitPrice": 0,
                    "Product": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "QuantityMultiplier": 0,
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "DefaultSupplierID": "",
                        "Returnable": false,
                        "xp": {}
                    },
                    "PromotionOverrides": [
                        {
                            "PromotionID": "",
                            "Amount": 0
                        }
                    ],
                    "Remove": false
                },
                "properties": {
                    "LineItemID": {
                        "type": "string"
                    },
                    "UnitPrice": {
                        "type": "number",
                        "format": "float"
                    },
                    "Product": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AdHocProduct"
                            }
                        ]
                    },
                    "PromotionOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PromotionOverride"
                        }
                    },
                    "Remove": {
                        "type": "boolean"
                    }
                }
            },
            "LineItemProduct": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "Returnable": false,
                    "QuantityMultiplier": 0,
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "DefaultSupplierID": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "Returnable": {
                        "type": "boolean"
                    },
                    "QuantityMultiplier": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "DefaultSupplierID": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "LineItemSpec": {
                "type": "object",
                "example": {
                    "SpecID": "",
                    "Name": "",
                    "OptionID": "",
                    "Value": "",
                    "PriceMarkupType": "NoMarkup",
                    "PriceMarkup": 0
                },
                "properties": {
                    "SpecID": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "OptionID": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "PriceMarkupType": {
                        "$ref": "#/components/schemas/PriceMarkupType"
                    },
                    "PriceMarkup": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "LineItemVariant": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ListFacet": {
                "type": "object",
                "properties": {
                    "Name": {
                        "type": "string"
                    },
                    "XpPath": {
                        "type": "string"
                    },
                    "Values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFacetValue"
                        }
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ListFacetValue": {
                "type": "object",
                "properties": {
                    "Value": {
                        "type": "string"
                    },
                    "Count": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Locale": {
                "type": "object",
                "example": {
                    "ID": "",
                    "OwnerID": "",
                    "Currency": "",
                    "Language": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Locale. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "Currency": {
                        "type": "string",
                        "description": "We recommend using ISO-4217 Currency Codes for compatibility with tax and payment processors.",
                        "maxLength": 100
                    },
                    "Language": {
                        "type": "string",
                        "description": "We recommend using ISO-639 Language code - ISO-3166 Country code (e.g. en-US).",
                        "maxLength": 100
                    }
                }
            },
            "LocaleAssignment": {
                "type": "object",
                "example": {
                    "LocaleID": "",
                    "BuyerID": "",
                    "UserGroupID": ""
                },
                "properties": {
                    "LocaleID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    }
                }
            },
            "MeBuyer": {
                "type": "object",
                "example": {
                    "ID": "",
                    "DefaultCatalogID": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 100
                    },
                    "DefaultCatalogID": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MeSeller": {
                "type": "object",
                "example": {
                    "ID": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 100
                    }
                }
            },
            "MessageCCListenerAssignment": {
                "type": "object",
                "example": {
                    "MessageSenderAssignment": {
                        "MessageSenderID": "",
                        "BuyerID": "",
                        "SupplierID": "",
                        "UserGroupID": "",
                        "MessageConfigName": "",
                        "MessageConfigDescription": ""
                    },
                    "MessageConfigName": "",
                    "MessageConfigDescription": "",
                    "MessageType": "OrderDeclined",
                    "BuyerID": "",
                    "SupplierID": "",
                    "UserGroupID": "",
                    "UserID": ""
                },
                "properties": {
                    "MessageSenderAssignment": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MessageSenderAssignment"
                            }
                        ]
                    },
                    "MessageConfigName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "MessageConfigDescription": {
                        "type": "string",
                        "readOnly": true
                    },
                    "MessageType": {
                        "$ref": "#/components/schemas/MessageType"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "SupplierID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    }
                }
            },
            "MessageSender": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "MessageTypes": [
                        "OrderDeclined"
                    ],
                    "Description": "",
                    "URL": "",
                    "ElevatedRoles": [
                        "ApiClientAdmin"
                    ],
                    "SharedKey": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string"
                    },
                    "MessageTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessageType"
                        }
                    },
                    "Description": {
                        "type": "string"
                    },
                    "URL": {
                        "type": "string",
                        "description": "URL the MessageSender will POST data to, likely a route within your middleware."
                    },
                    "ElevatedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        },
                        "description": "If additional data not provided by the message sender is needed, provide any elevated roles needed to make additional calls."
                    },
                    "SharedKey": {
                        "type": "string",
                        "description": "Security feature that allows your middleware to verify the digital signature in the request header to ensure you only accept trusted data."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "MessageSenderAssignment": {
                "type": "object",
                "example": {
                    "MessageSenderID": "",
                    "BuyerID": "",
                    "SupplierID": "",
                    "UserGroupID": "",
                    "MessageConfigName": "",
                    "MessageConfigDescription": ""
                },
                "properties": {
                    "MessageSenderID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "SupplierID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "MessageConfigName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "MessageConfigDescription": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessageType": {
                "type": "string",
                "enum": [
                    "OrderDeclined",
                    "OrderSubmitted",
                    "ShipmentCreated",
                    "ForgottenPassword",
                    "OrderSubmittedForYourApproval",
                    "OrderSubmittedForApproval",
                    "OrderApproved",
                    "OrderSubmittedForYourApprovalHasBeenApproved",
                    "OrderSubmittedForYourApprovalHasBeenDeclined",
                    "NewUserInvitation",
                    "OrderReturnDeclined",
                    "OrderReturnSubmitted",
                    "OrderReturnSubmittedForYourApproval",
                    "OrderReturnSubmittedForApproval",
                    "OrderReturnApproved",
                    "OrderReturnSubmittedForYourApprovalHasBeenApproved",
                    "OrderReturnSubmittedForYourApprovalHasBeenDeclined",
                    "OrderReturnCompleted"
                ],
                "description": ""
            },
            "MeSupplier": {
                "type": "object",
                "example": {
                    "ID": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "readOnly": true,
                        "maxLength": 100
                    }
                }
            },
            "Meta": {
                "type": "object",
                "properties": {
                    "Page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "PageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "TotalCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "TotalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ItemRange": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "NextPageKey": {
                        "type": "string"
                    }
                }
            },
            "MetaWithFacets": {
                "type": "object",
                "properties": {
                    "Facets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ListFacet"
                        }
                    },
                    "Page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "PageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "TotalCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "TotalPages": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "ItemRange": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    "NextPageKey": {
                        "type": "string"
                    }
                }
            },
            "MeUser": {
                "type": "object",
                "example": {
                    "Buyer": {
                        "ID": "",
                        "DefaultCatalogID": ""
                    },
                    "Supplier": {
                        "ID": ""
                    },
                    "Seller": {
                        "ID": ""
                    },
                    "ID": "",
                    "CompanyID": "",
                    "Username": "",
                    "Password": "",
                    "FirstName": "",
                    "LastName": "",
                    "Email": "",
                    "Phone": "",
                    "TermsAccepted": "2018-01-01T00:00:00-06:00",
                    "Active": false,
                    "xp": {},
                    "AvailableRoles": [
                        ""
                    ],
                    "Locale": {
                        "ID": "",
                        "OwnerID": "",
                        "Currency": "",
                        "Language": ""
                    },
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                },
                "properties": {
                    "Buyer": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MeBuyer"
                            }
                        ],
                        "readOnly": true
                    },
                    "Supplier": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MeSupplier"
                            }
                        ],
                        "readOnly": true
                    },
                    "Seller": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/MeSeller"
                            }
                        ],
                        "readOnly": true
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "CompanyID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Username": {
                        "type": "string",
                        "description": "Must be unique across the Marketplace.",
                        "maxLength": 100
                    },
                    "Password": {
                        "type": "string",
                        "format": "password"
                    },
                    "FirstName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LastName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Email": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "Phone": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "TermsAccepted": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, authentication is prohibited."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "AvailableRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of Roles currently available to the user via all SecurityProfile Assignments."
                    },
                    "Locale": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Locale"
                            }
                        ],
                        "readOnly": true,
                        "description": "Most specific Locale assigned to the user, if any."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "PasswordLastSetDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Can be used in conjunction with SecurityProfile.PasswordConfig to enforce password reset schedules."
                    }
                }
            },
            "OpenIdConnect": {
                "type": "object",
                "example": {
                    "ID": "",
                    "OrderCloudApiClientID": "",
                    "ConnectClientID": "",
                    "ConnectClientSecret": "",
                    "AppStartUrl": "",
                    "AuthorizationEndpoint": "",
                    "TokenEndpoint": "",
                    "UrlEncoded": false,
                    "IntegrationEventID": "",
                    "CallSyncUserIntegrationEvent": false,
                    "IntegrationEventName": "",
                    "AdditionalIdpScopes": [
                        ""
                    ],
                    "CustomErrorUrl": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "description": "ID of this OpenID Connect configuration object. Each object allows authentication to one OrderCloud ApiClient through one Identity Providing Party.",
                        "maxLength": 100
                    },
                    "OrderCloudApiClientID": {
                        "type": "string",
                        "description": "An ID that references an OrderCloud ApiClient."
                    },
                    "ConnectClientID": {
                        "type": "string",
                        "description": "An app ID from the Identity Provider that is required to get JWT tokens."
                    },
                    "ConnectClientSecret": {
                        "type": "string",
                        "description": "A secret string from the Identity Provider that grants access to get JWT tokens."
                    },
                    "AppStartUrl": {
                        "type": "string",
                        "description": "A URL on your front-end ordering site where users will be redirected after they authenticate through the Identity Provider. The string \"{token}\" will be replaced with a valid OrderCloud JWT."
                    },
                    "AuthorizationEndpoint": {
                        "type": "string",
                        "description": "A publicly known URL from the Identity Provider that redirects to a resource where users enter personal credentials."
                    },
                    "TokenEndpoint": {
                        "type": "string",
                        "description": "A publicly known URL from the Identity Provider where agents can get JWT tokens."
                    },
                    "UrlEncoded": {
                        "type": "boolean",
                        "description": "If true, uses a url encoded form post with all auth values. Otherwise, an Authorization header with basic auth is passed with a JSON object in the body."
                    },
                    "IntegrationEventID": {
                        "type": "string",
                        "description": "ID of the IntegrationEvent to call upon authorization request. Used when you haven't pre-populated users into OrderCloud, or need to sync user data."
                    },
                    "CallSyncUserIntegrationEvent": {
                        "type": "boolean",
                        "description": "If true, the integration event is always triggered regardless of if the user already exists in OrderCloud."
                    },
                    "IntegrationEventName": {
                        "type": "string",
                        "readOnly": true
                    },
                    "AdditionalIdpScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any additional scopes needed by the IDP."
                    },
                    "CustomErrorUrl": {
                        "type": "string",
                        "description": "A URL on your front-end ordering site where users will be redirected if an error occurs while trying to authenticate."
                    }
                }
            },
            "Order": {
                "type": "object",
                "example": {
                    "ID": "",
                    "FromUser": {
                        "ID": "",
                        "CompanyID": "",
                        "Username": "",
                        "Password": "",
                        "FirstName": "",
                        "LastName": "",
                        "Email": "",
                        "Phone": "",
                        "TermsAccepted": "2018-01-01T00:00:00-06:00",
                        "Active": false,
                        "xp": {},
                        "AvailableRoles": [
                            ""
                        ],
                        "Locale": {
                            "ID": "",
                            "OwnerID": "",
                            "Currency": "",
                            "Language": ""
                        },
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                    },
                    "FromCompanyID": "",
                    "ToCompanyID": "",
                    "FromUserID": "",
                    "BillingAddressID": "",
                    "BillingAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "ShippingAddressID": "",
                    "Comments": "",
                    "LineItemCount": 0,
                    "Status": "Unsubmitted",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "DateSubmitted": "2018-01-01T00:00:00-06:00",
                    "DateApproved": "2018-01-01T00:00:00-06:00",
                    "DateDeclined": "2018-01-01T00:00:00-06:00",
                    "DateCanceled": "2018-01-01T00:00:00-06:00",
                    "DateCompleted": "2018-01-01T00:00:00-06:00",
                    "LastUpdated": "2018-01-01T00:00:00-06:00",
                    "Subtotal": 0,
                    "ShippingCost": 0,
                    "TaxCost": 0,
                    "PromotionDiscount": 0,
                    "Currency": "",
                    "Total": 0,
                    "IsSubmitted": false,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "FromUser": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "readOnly": true,
                        "description": "User placing the order."
                    },
                    "FromCompanyID": {
                        "type": "string",
                        "description": "ID of the Buyer or Marketplace Owner placing the order. Mainly useful to the Marketplace Owner or Supplier receiving it."
                    },
                    "ToCompanyID": {
                        "type": "string",
                        "description": "ID of the Marketplace Owner or Supplier receiving the order, only writable on create. Mainly useful to the user placing it."
                    },
                    "FromUserID": {
                        "type": "string",
                        "description": "This property is only writable when creating an order on behalf of a buyer user."
                    },
                    "BillingAddressID": {
                        "type": "string"
                    },
                    "BillingAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "ShippingAddressID": {
                        "type": "string",
                        "description": "ID of the Shipping Address for all LineItems on the Order. Null when there are multiple Shipping Addresses involved."
                    },
                    "Comments": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "LineItemCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "Status": {
                        "$ref": "#/components/schemas/OrderStatus",
                        "readOnly": true
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateSubmitted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "NULL until the order passes from the buyer to the Marketplace Owner, including when Status is PendingApproval."
                    },
                    "DateApproved": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateDeclined": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCanceled": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Populated when all items on an order have shipped, or the order is explicitly completed."
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "Subtotal": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all LineItem.LineSubtotals."
                    },
                    "ShippingCost": {
                        "type": "number",
                        "format": "float",
                        "description": "Modifying requires OverrideShipping Role."
                    },
                    "TaxCost": {
                        "type": "number",
                        "format": "float",
                        "description": "Modifying requires TaxOverride Role."
                    },
                    "PromotionDiscount": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Sum of all Promotion.Amounts applied to the order."
                    },
                    "Currency": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Inherited from the user placing the order."
                    },
                    "Total": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true,
                        "description": "Subtotal + TaxCost + ShippingCost - PromotionDiscount"
                    },
                    "IsSubmitted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "True if this Order has been passed from the Buyer to the Marketplace Owner."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "OrderApproval": {
                "type": "object",
                "example": {
                    "AllowResubmit": false,
                    "ApprovalRuleID": "",
                    "ApprovingGroupID": "",
                    "Status": "Pending",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "DateCompleted": "2018-01-01T00:00:00-06:00",
                    "Approver": {
                        "ID": "",
                        "CompanyID": "",
                        "Username": "",
                        "Password": "",
                        "FirstName": "",
                        "LastName": "",
                        "Email": "",
                        "Phone": "",
                        "TermsAccepted": "2018-01-01T00:00:00-06:00",
                        "Active": false,
                        "xp": {},
                        "AvailableRoles": [
                            ""
                        ],
                        "Locale": {
                            "ID": "",
                            "OwnerID": "",
                            "Currency": "",
                            "Language": ""
                        },
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                    },
                    "Comments": ""
                },
                "properties": {
                    "AllowResubmit": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "If true, the submitting user will be able to modify the order and resubmit for approval."
                    },
                    "ApprovalRuleID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "ApprovingGroupID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Status": {
                        "$ref": "#/components/schemas/ApprovalStatus",
                        "readOnly": true
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "Approver": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "readOnly": true
                    },
                    "Comments": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "OrderApprovalInfo": {
                "type": "object",
                "example": {
                    "AllowResubmit": false,
                    "Comments": ""
                },
                "properties": {
                    "AllowResubmit": {
                        "type": "boolean",
                        "description": "Only relevant when declining an order. Changes the Order Status back to Open and allows the user to make changes and resubmit."
                    },
                    "Comments": {
                        "type": "string",
                        "description": "Comments to be saved with the order approval or denial.",
                        "maxLength": 2000
                    }
                }
            },
            "OrderApprovedResponse": {
                "type": "object",
                "example": {
                    "HttpStatusCode": 0,
                    "UnhandledErrorBody": "",
                    "xp": {},
                    "Succeeded": false
                },
                "properties": {
                    "HttpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnhandledErrorBody": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Succeeded": {
                        "type": "boolean"
                    }
                }
            },
            "OrderCalculateResponse": {
                "type": "object",
                "example": {
                    "LineItemOverrides": [
                        {
                            "LineItemID": "",
                            "UnitPrice": 0,
                            "Product": {
                                "ID": "",
                                "Name": "",
                                "Description": "",
                                "QuantityMultiplier": 0,
                                "ShipWeight": 0,
                                "ShipHeight": 0,
                                "ShipWidth": 0,
                                "ShipLength": 0,
                                "DefaultSupplierID": "",
                                "Returnable": false,
                                "xp": {}
                            },
                            "PromotionOverrides": [
                                {
                                    "PromotionID": "",
                                    "Amount": 0
                                }
                            ],
                            "Remove": false
                        }
                    ],
                    "ShippingTotal": 0,
                    "TaxTotal": 0,
                    "HttpStatusCode": 0,
                    "UnhandledErrorBody": "",
                    "xp": {},
                    "Succeeded": false
                },
                "properties": {
                    "LineItemOverrides": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItemOverride"
                        }
                    },
                    "ShippingTotal": {
                        "type": "number",
                        "format": "float"
                    },
                    "TaxTotal": {
                        "type": "number",
                        "format": "float"
                    },
                    "HttpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnhandledErrorBody": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Succeeded": {
                        "type": "boolean"
                    }
                }
            },
            "OrderDirection": {
                "type": "string",
                "enum": [
                    "Incoming",
                    "Outgoing",
                    "All"
                ],
                "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all."
            },
            "OrderPromotion": {
                "type": "object",
                "example": {
                    "Amount": 0,
                    "LineItemID": "",
                    "ID": "",
                    "LineItemLevel": false,
                    "Code": "",
                    "Name": "",
                    "RedemptionLimit": 0,
                    "RedemptionLimitPerUser": 0,
                    "RedemptionCount": 0,
                    "Description": "",
                    "FinePrint": "",
                    "StartDate": "2018-01-01T00:00:00-06:00",
                    "ExpirationDate": "2018-01-01T00:00:00-06:00",
                    "EligibleExpression": "",
                    "ValueExpression": "",
                    "CanCombine": false,
                    "AllowAllBuyers": false,
                    "OwnerID": "",
                    "xp": {}
                },
                "properties": {
                    "Amount": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true
                    },
                    "LineItemID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LineItemLevel": {
                        "type": "boolean",
                        "description": "If true, certain eligible expression requirements must be met, and the PromotionDiscount will be applied at the line item level."
                    },
                    "Code": {
                        "type": "string",
                        "description": "Must be unique. Entered by buyer when adding promo to order.",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "RedemptionLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit the total number of orders this promotion can be applied to across all users."
                    },
                    "RedemptionLimitPerUser": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit the total number of orders this promotion can be applied to per user."
                    },
                    "RedemptionCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "The number of times this promotion has been applied to an order."
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "FinePrint": {
                        "type": "string",
                        "description": "Terms, conditions, and other legal jargon.",
                        "maxLength": 2000
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ExpirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "EligibleExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine if an item or order is eligible for a promotion. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "ValueExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine the discount amount of an eligible promotion. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "CanCombine": {
                        "type": "boolean",
                        "description": "If true, the promotion can be applied to an order that already other promotions applied, as long as they can also be combined."
                    },
                    "AllowAllBuyers": {
                        "type": "boolean",
                        "description": "Allow promo to be used by all buyers in your Marketplace without creating explicit assignments."
                    },
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Promotion. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "OrderReturn": {
                "type": "object",
                "example": {
                    "ID": "",
                    "OrderID": "",
                    "PaymentIDs": [
                        ""
                    ],
                    "Status": "Unsubmitted",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "DateSubmitted": "2018-01-01T00:00:00-06:00",
                    "DateApproved": "2018-01-01T00:00:00-06:00",
                    "DateDeclined": "2018-01-01T00:00:00-06:00",
                    "DateCanceled": "2018-01-01T00:00:00-06:00",
                    "DateCompleted": "2018-01-01T00:00:00-06:00",
                    "LastUpdated": "2018-01-01T00:00:00-06:00",
                    "RefundAmount": 0,
                    "Comments": "",
                    "ItemsToReturn": [
                        {
                            "LineItemID": "",
                            "Quantity": 0,
                            "RefundAmount": 0,
                            "Comments": ""
                        }
                    ],
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "OrderID": {
                        "type": "string"
                    },
                    "PaymentIDs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true,
                        "description": "IDs of Payments associated with this OrderReturn."
                    },
                    "Status": {
                        "$ref": "#/components/schemas/OrderStatus",
                        "readOnly": true
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateSubmitted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "NULL until the order return passes from the buyer to the Marketplace Owner, including when Status is PendingApproval."
                    },
                    "DateApproved": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateDeclined": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCanceled": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Populated when payment to customer has been completed."
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "RefundAmount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Comments": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "ItemsToReturn": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderReturnItem"
                        }
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "OrderReturnApproval": {
                "type": "object",
                "example": {
                    "OrderReturnID": "",
                    "ApprovalRuleID": "",
                    "ApprovingGroupID": "",
                    "Status": "Pending",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "DateCompleted": "2018-01-01T00:00:00-06:00",
                    "Approver": {
                        "ID": "",
                        "CompanyID": "",
                        "Username": "",
                        "Password": "",
                        "FirstName": "",
                        "LastName": "",
                        "Email": "",
                        "Phone": "",
                        "TermsAccepted": "2018-01-01T00:00:00-06:00",
                        "Active": false,
                        "xp": {},
                        "AvailableRoles": [
                            ""
                        ],
                        "Locale": {
                            "ID": "",
                            "OwnerID": "",
                            "Currency": "",
                            "Language": ""
                        },
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                    },
                    "Comments": ""
                },
                "properties": {
                    "OrderReturnID": {
                        "type": "string"
                    },
                    "ApprovalRuleID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "ApprovingGroupID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Status": {
                        "$ref": "#/components/schemas/ApprovalStatus",
                        "readOnly": true
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "DateCompleted": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "Approver": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "readOnly": true
                    },
                    "Comments": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "OrderReturnItem": {
                "type": "object",
                "example": {
                    "LineItemID": "",
                    "Quantity": 0,
                    "RefundAmount": 0,
                    "Comments": ""
                },
                "properties": {
                    "LineItemID": {
                        "type": "string"
                    },
                    "Quantity": {
                        "type": "integer",
                        "format": "int32",
                        "default": 0,
                        "minimum": 0
                    },
                    "RefundAmount": {
                        "type": "number",
                        "format": "float"
                    },
                    "Comments": {
                        "type": "string",
                        "maxLength": 500
                    }
                }
            },
            "OrderShipMethodSelection": {
                "type": "object",
                "example": {
                    "ShipMethodSelections": [
                        {
                            "ShipEstimateID": "",
                            "ShipMethodID": ""
                        }
                    ]
                },
                "properties": {
                    "ShipMethodSelections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ShipMethodSelection"
                        }
                    }
                }
            },
            "OrderSplitResult": {
                "type": "object",
                "example": {
                    "OutgoingOrders": [
                        {
                            "ID": "",
                            "FromUser": {
                                "ID": "",
                                "CompanyID": "",
                                "Username": "",
                                "Password": "",
                                "FirstName": "",
                                "LastName": "",
                                "Email": "",
                                "Phone": "",
                                "TermsAccepted": "2018-01-01T00:00:00-06:00",
                                "Active": false,
                                "xp": {},
                                "AvailableRoles": [
                                    ""
                                ],
                                "Locale": {
                                    "ID": "",
                                    "OwnerID": "",
                                    "Currency": "",
                                    "Language": ""
                                },
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                            },
                            "FromCompanyID": "",
                            "ToCompanyID": "",
                            "FromUserID": "",
                            "BillingAddressID": "",
                            "BillingAddress": {
                                "ID": "",
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "CompanyName": "",
                                "FirstName": "",
                                "LastName": "",
                                "Street1": "",
                                "Street2": "",
                                "City": "",
                                "State": "",
                                "Zip": "",
                                "Country": "",
                                "Phone": "",
                                "AddressName": "",
                                "xp": {}
                            },
                            "ShippingAddressID": "",
                            "Comments": "",
                            "LineItemCount": 0,
                            "Status": "Unsubmitted",
                            "DateCreated": "2018-01-01T00:00:00-06:00",
                            "DateSubmitted": "2018-01-01T00:00:00-06:00",
                            "DateApproved": "2018-01-01T00:00:00-06:00",
                            "DateDeclined": "2018-01-01T00:00:00-06:00",
                            "DateCanceled": "2018-01-01T00:00:00-06:00",
                            "DateCompleted": "2018-01-01T00:00:00-06:00",
                            "LastUpdated": "2018-01-01T00:00:00-06:00",
                            "Subtotal": 0,
                            "ShippingCost": 0,
                            "TaxCost": 0,
                            "PromotionDiscount": 0,
                            "Currency": "",
                            "Total": 0,
                            "IsSubmitted": false,
                            "xp": {}
                        }
                    ],
                    "RemainingLineItemIDs": [
                        ""
                    ]
                },
                "properties": {
                    "OutgoingOrders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Order"
                        },
                        "description": "The outgoing Orders created, one for each unique Product.DefaultSupplierID on the original Order."
                    },
                    "RemainingLineItemIDs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of Line Items not added to an outgoing Order, most likely because Product.DefaultSupplierID is not set."
                    }
                }
            },
            "OrderStatus": {
                "type": "string",
                "enum": [
                    "Unsubmitted",
                    "AwaitingApproval",
                    "Declined",
                    "Open",
                    "Completed",
                    "Canceled"
                ],
                "description": ""
            },
            "OrderSubmitForApprovalResponse": {
                "type": "object",
                "example": {
                    "HttpStatusCode": 0,
                    "UnhandledErrorBody": "",
                    "xp": {},
                    "Succeeded": false
                },
                "properties": {
                    "HttpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnhandledErrorBody": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Succeeded": {
                        "type": "boolean"
                    }
                }
            },
            "OrderSubmitResponse": {
                "type": "object",
                "example": {
                    "HttpStatusCode": 0,
                    "UnhandledErrorBody": "",
                    "xp": {},
                    "Succeeded": false
                },
                "properties": {
                    "HttpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnhandledErrorBody": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Succeeded": {
                        "type": "boolean"
                    }
                }
            },
            "OrderWorksheet": {
                "type": "object",
                "example": {
                    "Order": {
                        "ID": "",
                        "FromUser": {
                            "ID": "",
                            "CompanyID": "",
                            "Username": "",
                            "Password": "",
                            "FirstName": "",
                            "LastName": "",
                            "Email": "",
                            "Phone": "",
                            "TermsAccepted": "2018-01-01T00:00:00-06:00",
                            "Active": false,
                            "xp": {},
                            "AvailableRoles": [
                                ""
                            ],
                            "Locale": {
                                "ID": "",
                                "OwnerID": "",
                                "Currency": "",
                                "Language": ""
                            },
                            "DateCreated": "2018-01-01T00:00:00-06:00",
                            "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                        },
                        "FromCompanyID": "",
                        "ToCompanyID": "",
                        "FromUserID": "",
                        "BillingAddressID": "",
                        "BillingAddress": {
                            "ID": "",
                            "DateCreated": "2018-01-01T00:00:00-06:00",
                            "CompanyName": "",
                            "FirstName": "",
                            "LastName": "",
                            "Street1": "",
                            "Street2": "",
                            "City": "",
                            "State": "",
                            "Zip": "",
                            "Country": "",
                            "Phone": "",
                            "AddressName": "",
                            "xp": {}
                        },
                        "ShippingAddressID": "",
                        "Comments": "",
                        "LineItemCount": 0,
                        "Status": "Unsubmitted",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "DateSubmitted": "2018-01-01T00:00:00-06:00",
                        "DateApproved": "2018-01-01T00:00:00-06:00",
                        "DateDeclined": "2018-01-01T00:00:00-06:00",
                        "DateCanceled": "2018-01-01T00:00:00-06:00",
                        "DateCompleted": "2018-01-01T00:00:00-06:00",
                        "LastUpdated": "2018-01-01T00:00:00-06:00",
                        "Subtotal": 0,
                        "ShippingCost": 0,
                        "TaxCost": 0,
                        "PromotionDiscount": 0,
                        "Currency": "",
                        "Total": 0,
                        "IsSubmitted": false,
                        "xp": {}
                    },
                    "LineItems": [
                        {
                            "ID": "",
                            "ProductID": "",
                            "Quantity": 0,
                            "DateAdded": "2018-01-01T00:00:00-06:00",
                            "QuantityShipped": 0,
                            "UnitPrice": 0,
                            "PromotionDiscount": 0,
                            "LineTotal": 0,
                            "LineSubtotal": 0,
                            "CostCenter": "",
                            "DateNeeded": "2018-01-01T00:00:00-06:00",
                            "ShippingAccount": "",
                            "ShippingAddressID": "",
                            "ShipFromAddressID": "",
                            "Product": {
                                "ID": "",
                                "Name": "",
                                "Description": "",
                                "Returnable": false,
                                "QuantityMultiplier": 0,
                                "ShipWeight": 0,
                                "ShipHeight": 0,
                                "ShipWidth": 0,
                                "ShipLength": 0,
                                "DefaultSupplierID": "",
                                "xp": {}
                            },
                            "Variant": {
                                "ID": "",
                                "Name": "",
                                "Description": "",
                                "ShipWeight": 0,
                                "ShipHeight": 0,
                                "ShipWidth": 0,
                                "ShipLength": 0,
                                "xp": {}
                            },
                            "ShippingAddress": {
                                "ID": "",
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "CompanyName": "",
                                "FirstName": "",
                                "LastName": "",
                                "Street1": "",
                                "Street2": "",
                                "City": "",
                                "State": "",
                                "Zip": "",
                                "Country": "",
                                "Phone": "",
                                "AddressName": "",
                                "xp": {}
                            },
                            "ShipFromAddress": {
                                "ID": "",
                                "DateCreated": "2018-01-01T00:00:00-06:00",
                                "CompanyName": "",
                                "FirstName": "",
                                "LastName": "",
                                "Street1": "",
                                "Street2": "",
                                "City": "",
                                "State": "",
                                "Zip": "",
                                "Country": "",
                                "Phone": "",
                                "AddressName": "",
                                "xp": {}
                            },
                            "SupplierID": "",
                            "InventoryRecordID": "",
                            "PriceScheduleID": "",
                            "PriceOverridden": false,
                            "Specs": [
                                {
                                    "SpecID": "",
                                    "Name": "",
                                    "OptionID": "",
                                    "Value": "",
                                    "PriceMarkupType": "NoMarkup",
                                    "PriceMarkup": 0
                                }
                            ],
                            "xp": {}
                        }
                    ],
                    "OrderPromotions": [
                        {
                            "Amount": 0,
                            "LineItemID": "",
                            "ID": "",
                            "LineItemLevel": false,
                            "Code": "",
                            "Name": "",
                            "RedemptionLimit": 0,
                            "RedemptionLimitPerUser": 0,
                            "RedemptionCount": 0,
                            "Description": "",
                            "FinePrint": "",
                            "StartDate": "2018-01-01T00:00:00-06:00",
                            "ExpirationDate": "2018-01-01T00:00:00-06:00",
                            "EligibleExpression": "",
                            "ValueExpression": "",
                            "CanCombine": false,
                            "AllowAllBuyers": false,
                            "OwnerID": "",
                            "xp": {}
                        }
                    ],
                    "ShipEstimateResponse": {
                        "ShipEstimates": [
                            {
                                "ID": "",
                                "xp": {},
                                "SelectedShipMethodID": "",
                                "ShipEstimateItems": [
                                    {
                                        "LineItemID": "",
                                        "Quantity": 0
                                    }
                                ],
                                "ShipMethods": [
                                    {
                                        "ID": "",
                                        "Name": "",
                                        "Cost": 0,
                                        "EstimatedTransitDays": 0,
                                        "xp": {}
                                    }
                                ]
                            }
                        ],
                        "HttpStatusCode": 0,
                        "UnhandledErrorBody": "",
                        "xp": {},
                        "Succeeded": false
                    },
                    "OrderCalculateResponse": {
                        "LineItemOverrides": [
                            {
                                "LineItemID": "",
                                "UnitPrice": 0,
                                "Product": {
                                    "ID": "",
                                    "Name": "",
                                    "Description": "",
                                    "QuantityMultiplier": 0,
                                    "ShipWeight": 0,
                                    "ShipHeight": 0,
                                    "ShipWidth": 0,
                                    "ShipLength": 0,
                                    "DefaultSupplierID": "",
                                    "Returnable": false,
                                    "xp": {}
                                },
                                "PromotionOverrides": [
                                    {
                                        "PromotionID": "",
                                        "Amount": 0
                                    }
                                ],
                                "Remove": false
                            }
                        ],
                        "ShippingTotal": 0,
                        "TaxTotal": 0,
                        "HttpStatusCode": 0,
                        "UnhandledErrorBody": "",
                        "xp": {},
                        "Succeeded": false
                    },
                    "OrderSubmitResponse": {
                        "HttpStatusCode": 0,
                        "UnhandledErrorBody": "",
                        "xp": {},
                        "Succeeded": false
                    },
                    "OrderSubmitForApprovalResponse": {
                        "HttpStatusCode": 0,
                        "UnhandledErrorBody": "",
                        "xp": {},
                        "Succeeded": false
                    },
                    "OrderApprovedResponse": {
                        "HttpStatusCode": 0,
                        "UnhandledErrorBody": "",
                        "xp": {},
                        "Succeeded": false
                    }
                },
                "properties": {
                    "Order": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Order"
                            }
                        ]
                    },
                    "LineItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        }
                    },
                    "OrderPromotions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrderPromotion"
                        }
                    },
                    "ShipEstimateResponse": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ShipEstimateResponse"
                            }
                        ]
                    },
                    "OrderCalculateResponse": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrderCalculateResponse"
                            }
                        ]
                    },
                    "OrderSubmitResponse": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrderSubmitResponse"
                            }
                        ]
                    },
                    "OrderSubmitForApprovalResponse": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrderSubmitForApprovalResponse"
                            }
                        ]
                    },
                    "OrderApprovedResponse": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrderApprovedResponse"
                            }
                        ]
                    }
                }
            },
            "PartyType": {
                "type": "string",
                "enum": [
                    "User",
                    "Group",
                    "Company"
                ],
                "description": ""
            },
            "PasswordConfig": {
                "type": "object",
                "example": {
                    "LimitPasswordReuse": 0,
                    "MaxConsecutiveDupeChars": 0,
                    "MaximumPasswordAge": 0,
                    "MinimumPasswordAge": 0,
                    "AllowedFailedAttempts": 0,
                    "LockoutDuration": 0,
                    "UpperCaseRequired": false,
                    "LowerCaseRequired": false,
                    "SpecialCharacterRequired": false,
                    "NumericRequired": false,
                    "MinimumCharacterCount": 0
                },
                "properties": {
                    "LimitPasswordReuse": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of passwords, including the current password, that are blocked from reuse. For example, if set to 1, any password except the current one can be reused.",
                        "minimum": 0,
                        "maximum": 24
                    },
                    "MaxConsecutiveDupeChars": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum number of consecutive repeating characters in a password.",
                        "minimum": 1,
                        "maximum": 24
                    },
                    "MaximumPasswordAge": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The password expires after MaximumPasswordAge in days.",
                        "minimum": 1,
                        "maximum": 365
                    },
                    "MinimumPasswordAge": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The password may not be changed again until this number of minutes has passed.",
                        "minimum": 1,
                        "maximum": 60
                    },
                    "AllowedFailedAttempts": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of failed attempts before the account is Locked for the LockoutDuration.",
                        "minimum": 1,
                        "maximum": 10
                    },
                    "LockoutDuration": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The number of minutes an account is locked when the AllowedFailedAttempts is reached.",
                        "minimum": 2,
                        "maximum": 1440
                    },
                    "UpperCaseRequired": {
                        "type": "boolean",
                        "description": "At least one upper case character is required."
                    },
                    "LowerCaseRequired": {
                        "type": "boolean",
                        "description": "At least one lower case character is required."
                    },
                    "SpecialCharacterRequired": {
                        "type": "boolean",
                        "description": "At least one special character is required."
                    },
                    "NumericRequired": {
                        "type": "boolean",
                        "description": "At least one number is required."
                    },
                    "MinimumCharacterCount": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The minimum length of a password.",
                        "minimum": 8
                    }
                }
            },
            "PasswordReset": {
                "type": "object",
                "example": {
                    "ClientID": "",
                    "Username": "",
                    "Password": ""
                },
                "properties": {
                    "ClientID": {
                        "type": "string"
                    },
                    "Username": {
                        "type": "string"
                    },
                    "Password": {
                        "type": "string",
                        "format": "password"
                    }
                }
            },
            "PasswordResetRequest": {
                "type": "object",
                "example": {
                    "ClientID": "",
                    "Email": "",
                    "Username": "",
                    "URL": ""
                },
                "properties": {
                    "ClientID": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "Username": {
                        "type": "string"
                    },
                    "URL": {
                        "type": "string"
                    }
                }
            },
            "Payment": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Type": "PurchaseOrder",
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "CreditCardID": "",
                    "SpendingAccountID": "",
                    "Description": "",
                    "Currency": "",
                    "Amount": 0,
                    "Accepted": false,
                    "OrderReturnID": "",
                    "xp": {},
                    "Transactions": [
                        {
                            "ID": "",
                            "Type": "",
                            "DateExecuted": "2018-01-01T00:00:00-06:00",
                            "Currency": "",
                            "Amount": 0,
                            "Succeeded": false,
                            "ResultCode": "",
                            "ResultMessage": "",
                            "xp": {}
                        }
                    ]
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Type": {
                        "$ref": "#/components/schemas/PaymentType"
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "CreditCardID": {
                        "type": "string",
                        "description": "Only writeable on POST."
                    },
                    "SpendingAccountID": {
                        "type": "string",
                        "description": "Only writeable on POST."
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "Currency": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Inherited from Order."
                    },
                    "Amount": {
                        "type": "number",
                        "format": "float",
                        "description": "If null, Payment applies to order total (or total of specific Line Items, if set), minus any other Payments where Amount is set. Value can only be negative if processing a payment for an OrderReturn."
                    },
                    "Accepted": {
                        "type": "boolean",
                        "description": "All payments must be Accepted to submit an order."
                    },
                    "OrderReturnID": {
                        "type": "string",
                        "description": "Used to indicate this payment is associated with an Order Return."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Transactions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PaymentTransaction"
                        },
                        "readOnly": true
                    }
                }
            },
            "PaymentTransaction": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Type": "",
                    "DateExecuted": "2018-01-01T00:00:00-06:00",
                    "Currency": "",
                    "Amount": 0,
                    "Succeeded": false,
                    "ResultCode": "",
                    "ResultMessage": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Type": {
                        "type": "string"
                    },
                    "DateExecuted": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "Currency": {
                        "type": "string",
                        "description": "Usually the same as Payment Currency, but can be different. A marketplace may capture funds from the buyer user in one currency and process a payout to the seller in another.",
                        "maxLength": 100
                    },
                    "Amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Usually the same as Payment Amount, but can be different. A charge might have a subsequent partial credit, for example."
                    },
                    "Succeeded": {
                        "type": "boolean"
                    },
                    "ResultCode": {
                        "type": "string"
                    },
                    "ResultMessage": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "PaymentType": {
                "type": "string",
                "enum": [
                    "PurchaseOrder",
                    "CreditCard",
                    "SpendingAccount"
                ],
                "description": ""
            },
            "PriceBreak": {
                "type": "object",
                "example": {
                    "Quantity": 0,
                    "Price": 0,
                    "SalePrice": 0
                },
                "properties": {
                    "Quantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Most commonly 1, except when offering tiered/bulk pricing.",
                        "minimum": 0
                    },
                    "Price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price per unit."
                    },
                    "SalePrice": {
                        "type": "number",
                        "format": "float",
                        "description": "Optional. Sale Price per unit. If the current date/time is within the PriceSchedule SaleStart and SaleEnd, this SalePrice will be used."
                    }
                }
            },
            "PriceMarkupType": {
                "type": "string",
                "enum": [
                    "NoMarkup",
                    "AmountPerQuantity",
                    "AmountTotal",
                    "Percentage"
                ],
                "description": ""
            },
            "PriceSchedule": {
                "type": "object",
                "example": {
                    "OwnerID": "",
                    "ID": "",
                    "Name": "",
                    "ApplyTax": false,
                    "ApplyShipping": false,
                    "MinQuantity": 0,
                    "MaxQuantity": 0,
                    "UseCumulativeQuantity": false,
                    "RestrictedQuantity": false,
                    "PriceBreaks": [
                        {
                            "Quantity": 0,
                            "Price": 0,
                            "SalePrice": 0
                        }
                    ],
                    "Currency": "",
                    "SaleStart": "2018-01-01T00:00:00-06:00",
                    "SaleEnd": "2018-01-01T00:00:00-06:00",
                    "IsOnSale": false,
                    "xp": {}
                },
                "properties": {
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the PriceSchedule. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ApplyTax": {
                        "type": "boolean",
                        "description": "For reference only for calculating tax, does not influence any OrderCloud behavior."
                    },
                    "ApplyShipping": {
                        "type": "boolean",
                        "description": "For reference only for calculating shipping cost, does not influence any OrderCloud behavior."
                    },
                    "MinQuantity": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "description": "The minimum quantity allowed per order.",
                        "minimum": 1
                    },
                    "MaxQuantity": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The maximum quantity allowed per order."
                    },
                    "UseCumulativeQuantity": {
                        "type": "boolean",
                        "description": "If true, LineItem quantities will be aggregated by productID when determining which price break applies, and when Min/Max quantities are met. Else, each LineItem is treated separately."
                    },
                    "RestrictedQuantity": {
                        "type": "boolean",
                        "description": "If true, this product can only be ordered in quantities that exactly match one of the price breaks on this schedule."
                    },
                    "PriceBreaks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PriceBreak"
                        }
                    },
                    "Currency": {
                        "type": "string",
                        "description": "We recommend using ISO-4217 Currency Codes for compatibility with tax and payment processors.",
                        "maxLength": 100
                    },
                    "SaleStart": {
                        "type": "string",
                        "format": "date-time",
                        "default": null,
                        "description": "Optional. Starting date/time for PriceBreak.SalePrice to be used as the price for the LineItem. Requires that the PriceBreak.SalePrice value is set."
                    },
                    "SaleEnd": {
                        "type": "string",
                        "format": "date-time",
                        "default": null,
                        "description": "Optional. Ending date/time for PriceBreak.SalePrice to be used as the price for the LineItem. Requires that the PriceBreak.SalePrice value is set."
                    },
                    "IsOnSale": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Is the price currently a sale price. Determined by the SaleStart and SaleEnd date/times and the presence of PriceBreak.SalePrice value being set."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "Product": {
                "type": "object",
                "example": {
                    "OwnerID": "",
                    "DefaultPriceScheduleID": "",
                    "AutoForward": false,
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "QuantityMultiplier": 0,
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "Active": false,
                    "SpecCount": 0,
                    "VariantCount": 0,
                    "ShipFromAddressID": "",
                    "Inventory": {
                        "Enabled": false,
                        "NotificationPoint": 0,
                        "VariantLevelTracking": false,
                        "OrderCanExceed": false,
                        "QuantityAvailable": 0,
                        "LastUpdated": "2018-01-01T00:00:00-06:00"
                    },
                    "DefaultSupplierID": "",
                    "AllSuppliersCanSell": false,
                    "Returnable": false,
                    "xp": {}
                },
                "properties": {
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Product. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "DefaultPriceScheduleID": {
                        "type": "string",
                        "description": "When provided, no explicit PriceSchedule assignment is required. When a PriceSchedule assignment exists, it will override any default provided."
                    },
                    "AutoForward": {
                        "type": "boolean",
                        "description": "If true, when this product is ordered by a Buyer, it will automatically be added to a new Order from the Marketplace Owner to the Default Supplier and submitted. Requires a valid DefaultSupplierID."
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "QuantityMultiplier": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "description": "For reference only, does not influence any OrderCloud behavior. Used to indicate an amount per Quantity.",
                        "minimum": 1
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, product is not visible or purchasable from the Shopper perspective."
                    },
                    "SpecCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Count of Specs assigned to the product."
                    },
                    "VariantCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "Count of Variants generated from the product/spec combinations."
                    },
                    "ShipFromAddressID": {
                        "type": "string",
                        "description": "Marketplace Owner or Supplier AddressID where the product will be shipped from. Can be used to calculate shipping costs."
                    },
                    "Inventory": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Inventory"
                            }
                        ]
                    },
                    "DefaultSupplierID": {
                        "type": "string",
                        "description": "If this property has a value and a SupplierID isn't explicitly passed when creating a LineItem, this SupplierID will be used."
                    },
                    "AllSuppliersCanSell": {
                        "type": "boolean",
                        "description": "If true, all suppliers are eligible to opt into selling this product."
                    },
                    "Returnable": {
                        "type": "boolean"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ProductAssignment": {
                "type": "object",
                "example": {
                    "SellerID": "",
                    "ProductID": "",
                    "BuyerID": "",
                    "UserGroupID": "",
                    "PriceScheduleID": ""
                },
                "properties": {
                    "SellerID": {
                        "type": "string",
                        "description": "Marketplace owner can write to this property when creating product assignments for other sellers. A PriceScheduleID owned by the SellerID is required in order to write to this property."
                    },
                    "ProductID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "PriceScheduleID": {
                        "type": "string"
                    }
                }
            },
            "ProductCatalogAssignment": {
                "type": "object",
                "example": {
                    "CatalogID": "",
                    "ProductID": ""
                },
                "properties": {
                    "CatalogID": {
                        "type": "string"
                    },
                    "ProductID": {
                        "type": "string"
                    }
                }
            },
            "ProductCollection": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ProductFacet": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "XpPath": "",
                    "ListOrder": 1,
                    "MinCount": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "XpPath": {
                        "type": "string",
                        "description": "Optional. Identifies full path to xp field used for this facet. If not provided, facet value assumed to be stored at product.xp.{facet ID}.",
                        "maxLength": 200
                    },
                    "ListOrder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "MinCount": {
                        "type": "integer",
                        "format": "int32",
                        "default": 1,
                        "description": "Minimum count required or a facet value to be returned in list metadata. Default is 1. If you want zero-count values returned, set this to 0."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ProductSupplier": {
                "type": "object",
                "example": {
                    "DefaultPriceScheduleID": "",
                    "ID": "",
                    "Name": "",
                    "Active": false,
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "AllBuyersCanOrder": false,
                    "xp": {}
                },
                "properties": {
                    "DefaultPriceScheduleID": {
                        "type": "string"
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, all authentication is prohibited."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "AllBuyersCanOrder": {
                        "type": "boolean",
                        "description": "If false, buyers will only be able to set ToCompanyID on an order to the Marketplace Owner, or suppliers they have an explicit relationship to."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "Promotion": {
                "type": "object",
                "example": {
                    "ID": "",
                    "LineItemLevel": false,
                    "Code": "",
                    "Name": "",
                    "RedemptionLimit": 0,
                    "RedemptionLimitPerUser": 0,
                    "RedemptionCount": 0,
                    "Description": "",
                    "FinePrint": "",
                    "StartDate": "2018-01-01T00:00:00-06:00",
                    "ExpirationDate": "2018-01-01T00:00:00-06:00",
                    "EligibleExpression": "",
                    "ValueExpression": "",
                    "CanCombine": false,
                    "AllowAllBuyers": false,
                    "OwnerID": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LineItemLevel": {
                        "type": "boolean",
                        "description": "If true, certain eligible expression requirements must be met, and the PromotionDiscount will be applied at the line item level."
                    },
                    "Code": {
                        "type": "string",
                        "description": "Must be unique. Entered by buyer when adding promo to order.",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "RedemptionLimit": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit the total number of orders this promotion can be applied to across all users."
                    },
                    "RedemptionLimitPerUser": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Limit the total number of orders this promotion can be applied to per user."
                    },
                    "RedemptionCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true,
                        "description": "The number of times this promotion has been applied to an order."
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "FinePrint": {
                        "type": "string",
                        "description": "Terms, conditions, and other legal jargon.",
                        "maxLength": 2000
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "ExpirationDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "EligibleExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine if an item or order is eligible for a promotion. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "ValueExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine the discount amount of an eligible promotion. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "CanCombine": {
                        "type": "boolean",
                        "description": "If true, the promotion can be applied to an order that already other promotions applied, as long as they can also be combined."
                    },
                    "AllowAllBuyers": {
                        "type": "boolean",
                        "description": "Allow promo to be used by all buyers in your Marketplace without creating explicit assignments."
                    },
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Promotion. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "PromotionAssignment": {
                "type": "object",
                "example": {
                    "PromotionID": "",
                    "BuyerID": "",
                    "UserGroupID": ""
                },
                "properties": {
                    "PromotionID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    }
                }
            },
            "PromotionOverride": {
                "type": "object",
                "example": {
                    "PromotionID": "",
                    "Amount": 0
                },
                "properties": {
                    "PromotionID": {
                        "type": "string"
                    },
                    "Amount": {
                        "type": "number",
                        "format": "float",
                        "description": "Overrides the promotion's calculated discount to this amount."
                    }
                }
            },
            "PublicKey": {
                "type": "object",
                "example": {
                    "kty": "",
                    "n": "",
                    "e": "",
                    "alg": "",
                    "use": "",
                    "kid": ""
                },
                "properties": {
                    "kty": {
                        "type": "string"
                    },
                    "n": {
                        "type": "string"
                    },
                    "e": {
                        "type": "string"
                    },
                    "alg": {
                        "type": "string"
                    },
                    "use": {
                        "type": "string"
                    },
                    "kid": {
                        "type": "string"
                    }
                }
            },
            "SearchType": {
                "type": "string",
                "enum": [
                    "AnyTerm",
                    "AllTermsAnyField",
                    "AllTermsSameField",
                    "ExactPhrase",
                    "ExactPhrasePrefix"
                ],
                "description": ""
            },
            "SecurityProfile": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Roles": [
                        "ApiClientAdmin"
                    ],
                    "CustomRoles": [
                        ""
                    ],
                    "PasswordConfig": {
                        "LimitPasswordReuse": 0,
                        "MaxConsecutiveDupeChars": 0,
                        "MaximumPasswordAge": 0,
                        "MinimumPasswordAge": 0,
                        "AllowedFailedAttempts": 0,
                        "LockoutDuration": 0,
                        "UpperCaseRequired": false,
                        "LowerCaseRequired": false,
                        "SpecialCharacterRequired": false,
                        "NumericRequired": false,
                        "MinimumCharacterCount": 0
                    }
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        }
                    },
                    "CustomRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "PasswordConfig": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PasswordConfig"
                            }
                        ],
                        "description": "When PasswordConfig.ExpireInDays has a value, the user will be required to go through the PW reset flow once that number of days has passed."
                    }
                }
            },
            "SecurityProfileAssignment": {
                "type": "object",
                "example": {
                    "SecurityProfileID": "",
                    "BuyerID": "",
                    "SupplierID": "",
                    "UserID": "",
                    "UserGroupID": ""
                },
                "properties": {
                    "SecurityProfileID": {
                        "type": "string"
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "SupplierID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    }
                }
            },
            "SellerApprovalRule": {
                "type": "object",
                "example": {
                    "OwnerID": "",
                    "ApprovalType": "Order",
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "ApprovingGroupID": "",
                    "RuleExpression": "",
                    "xp": {}
                },
                "properties": {
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization who owns the rule. Only the MPO can write a value other than their own organization ID. The value is used to look up the ApprovingGroupID."
                    },
                    "ApprovalType": {
                        "$ref": "#/components/schemas/ApprovalType",
                        "description": "OrderReturn is the only Type supported currently. We plan to expand to Orders in the future."
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "ApprovingGroupID": {
                        "type": "string"
                    },
                    "RuleExpression": {
                        "type": "string",
                        "description": "The expression evaluated to determine an order requires approval. See Rules Engine documentation for formatting details.",
                        "maxLength": 400
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ShipEstimate": {
                "type": "object",
                "example": {
                    "ID": "",
                    "xp": {},
                    "SelectedShipMethodID": "",
                    "ShipEstimateItems": [
                        {
                            "LineItemID": "",
                            "Quantity": 0
                        }
                    ],
                    "ShipMethods": [
                        {
                            "ID": "",
                            "Name": "",
                            "Cost": 0,
                            "EstimatedTransitDays": 0,
                            "xp": {}
                        }
                    ]
                },
                "properties": {
                    "ID": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "SelectedShipMethodID": {
                        "type": "string"
                    },
                    "ShipEstimateItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ShipEstimateItem"
                        }
                    },
                    "ShipMethods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ShipMethod"
                        }
                    }
                }
            },
            "ShipEstimateItem": {
                "type": "object",
                "example": {
                    "LineItemID": "",
                    "Quantity": 0
                },
                "properties": {
                    "LineItemID": {
                        "type": "string"
                    },
                    "Quantity": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ShipEstimateResponse": {
                "type": "object",
                "example": {
                    "ShipEstimates": [
                        {
                            "ID": "",
                            "xp": {},
                            "SelectedShipMethodID": "",
                            "ShipEstimateItems": [
                                {
                                    "LineItemID": "",
                                    "Quantity": 0
                                }
                            ],
                            "ShipMethods": [
                                {
                                    "ID": "",
                                    "Name": "",
                                    "Cost": 0,
                                    "EstimatedTransitDays": 0,
                                    "xp": {}
                                }
                            ]
                        }
                    ],
                    "HttpStatusCode": 0,
                    "UnhandledErrorBody": "",
                    "xp": {},
                    "Succeeded": false
                },
                "properties": {
                    "ShipEstimates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ShipEstimate"
                        }
                    },
                    "HttpStatusCode": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnhandledErrorBody": {
                        "type": "string"
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Succeeded": {
                        "type": "boolean"
                    }
                }
            },
            "Shipment": {
                "type": "object",
                "example": {
                    "ID": "",
                    "BuyerID": "",
                    "Shipper": "",
                    "DateShipped": "2018-01-01T00:00:00-06:00",
                    "DateDelivered": "2018-01-01T00:00:00-06:00",
                    "TrackingNumber": "",
                    "Cost": 0,
                    "OwnerID": "",
                    "xp": {},
                    "Account": "",
                    "FromAddressID": "",
                    "ToAddressID": "",
                    "FromAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    },
                    "ToAddress": {
                        "ID": "",
                        "DateCreated": "2018-01-01T00:00:00-06:00",
                        "CompanyName": "",
                        "FirstName": "",
                        "LastName": "",
                        "Street1": "",
                        "Street2": "",
                        "City": "",
                        "State": "",
                        "Zip": "",
                        "Country": "",
                        "Phone": "",
                        "AddressName": "",
                        "xp": {}
                    }
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "BuyerID": {
                        "type": "string"
                    },
                    "Shipper": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "DateShipped": {
                        "type": "string",
                        "format": "date-time",
                        "description": "In order to properly trigger OrderShipped emails, this date must be NULL on initial POST. Update with the date only when all of the Shipment items have been created. Once all of an order's items exist on a shipment that has a DateShipped the OrderShipped email will trigger and Order.Status will be updated to Complete."
                    },
                    "DateDelivered": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "TrackingNumber": {
                        "type": "string",
                        "maxLength": 3000
                    },
                    "Cost": {
                        "type": "number",
                        "format": "float",
                        "description": "For reference only, does not influence any OrderCloud behavior."
                    },
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Shipment. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "Account": {
                        "type": "string"
                    },
                    "FromAddressID": {
                        "type": "string",
                        "description": "Marketplace Owner or Supplier AddressID where the product will be shipped from."
                    },
                    "ToAddressID": {
                        "type": "string"
                    },
                    "FromAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    },
                    "ToAddress": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Address"
                            }
                        ],
                        "readOnly": true
                    }
                }
            },
            "ShipmentItem": {
                "type": "object",
                "example": {
                    "OrderID": "",
                    "LineItemID": "",
                    "QuantityShipped": 0,
                    "UnitPrice": 0,
                    "CostCenter": "",
                    "DateNeeded": "2018-01-01T00:00:00-06:00",
                    "Product": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "Returnable": false,
                        "QuantityMultiplier": 0,
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "DefaultSupplierID": "",
                        "xp": {}
                    },
                    "Variant": {
                        "ID": "",
                        "Name": "",
                        "Description": "",
                        "ShipWeight": 0,
                        "ShipHeight": 0,
                        "ShipWidth": 0,
                        "ShipLength": 0,
                        "xp": {}
                    },
                    "Specs": [
                        {
                            "SpecID": "",
                            "Name": "",
                            "OptionID": "",
                            "Value": "",
                            "PriceMarkupType": "NoMarkup",
                            "PriceMarkup": 0
                        }
                    ],
                    "xp": {}
                },
                "properties": {
                    "OrderID": {
                        "type": "string"
                    },
                    "LineItemID": {
                        "type": "string"
                    },
                    "QuantityShipped": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "UnitPrice": {
                        "type": "number",
                        "format": "float",
                        "readOnly": true
                    },
                    "CostCenter": {
                        "type": "string",
                        "readOnly": true
                    },
                    "DateNeeded": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "Product": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemProduct"
                            }
                        ],
                        "readOnly": true
                    },
                    "Variant": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemVariant"
                            }
                        ],
                        "readOnly": true
                    },
                    "Specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/LineItemSpec"
                        },
                        "readOnly": true
                    },
                    "xp": {
                        "type": "object",
                        "readOnly": true,
                        "description": "For reference only, represents LineItem XP from the given LineItem ID"
                    }
                }
            },
            "ShipMethod": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Cost": 0,
                    "EstimatedTransitDays": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Cost": {
                        "type": "number",
                        "format": "float"
                    },
                    "EstimatedTransitDays": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "ShipMethodSelection": {
                "type": "object",
                "example": {
                    "ShipEstimateID": "",
                    "ShipMethodID": ""
                },
                "properties": {
                    "ShipEstimateID": {
                        "type": "string"
                    },
                    "ShipMethodID": {
                        "type": "string"
                    }
                }
            },
            "Spec": {
                "type": "object",
                "example": {
                    "OwnerID": "",
                    "ID": "",
                    "ListOrder": 1,
                    "Name": "",
                    "DefaultValue": "",
                    "Required": false,
                    "AllowOpenText": false,
                    "DefaultOptionID": "",
                    "DefinesVariant": false,
                    "xp": {},
                    "OptionCount": 0,
                    "Options": [
                        {
                            "ID": "",
                            "Value": "",
                            "ListOrder": 1,
                            "IsOpenText": false,
                            "PriceMarkupType": "NoMarkup",
                            "PriceMarkup": 0,
                            "xp": {}
                        }
                    ]
                },
                "properties": {
                    "OwnerID": {
                        "type": "string",
                        "description": "ID of the organization that owns the Spec. Only the Marketplace Owner can override the OwnerID on create."
                    },
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "ListOrder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "Name": {
                        "type": "string"
                    },
                    "DefaultValue": {
                        "type": "string",
                        "description": "If no Spec.Value is passed in the LineItemSpec, this value will be used.",
                        "maxLength": 2000
                    },
                    "Required": {
                        "type": "boolean"
                    },
                    "AllowOpenText": {
                        "type": "boolean",
                        "description": "For Spec options that are not pre-defined, such as FirstName for a business card."
                    },
                    "DefaultOptionID": {
                        "type": "string",
                        "description": "This property can only be written to after both the Spec and Option have been created. If no Spec.OptionID is passed in the LineItemSpec, this option will be used."
                    },
                    "DefinesVariant": {
                        "type": "boolean",
                        "description": "If true, each unique combinations of this Spec's Options should map to a unique Product Variant."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "OptionCount": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "Options": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SpecOption"
                        },
                        "readOnly": true
                    }
                }
            },
            "SpecOption": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Value": "",
                    "ListOrder": 1,
                    "IsOpenText": false,
                    "PriceMarkupType": "NoMarkup",
                    "PriceMarkup": 0,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Value": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "ListOrder": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "IsOpenText": {
                        "type": "boolean"
                    },
                    "PriceMarkupType": {
                        "$ref": "#/components/schemas/PriceMarkupType",
                        "description": "Used to change the price of a product when a specific Spec Option is selected."
                    },
                    "PriceMarkup": {
                        "type": "number",
                        "format": "float"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "SpecProductAssignment": {
                "type": "object",
                "example": {
                    "SpecID": "",
                    "ProductID": "",
                    "DefaultValue": "",
                    "DefaultOptionID": ""
                },
                "properties": {
                    "SpecID": {
                        "type": "string"
                    },
                    "ProductID": {
                        "type": "string"
                    },
                    "DefaultValue": {
                        "type": "string",
                        "description": "Optional. When defined, overrides the DefaultValue set on the Spec for just this Product.",
                        "maxLength": 2000
                    },
                    "DefaultOptionID": {
                        "type": "string",
                        "description": "Optional. When defined, overrides the DefaultOptionID set on the Spec for just this Product."
                    }
                }
            },
            "SpendingAccount": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Balance": 0,
                    "AllowAsPaymentMethod": false,
                    "RedemptionCode": "",
                    "StartDate": "2018-01-01T00:00:00-06:00",
                    "EndDate": "2018-01-01T00:00:00-06:00",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Balance": {
                        "type": "number",
                        "format": "float"
                    },
                    "AllowAsPaymentMethod": {
                        "type": "boolean",
                        "description": "If true, a Payment can be created referencing the SpendingAccountID."
                    },
                    "RedemptionCode": {
                        "type": "string",
                        "description": "For reference only, does not influence any OrderCloud behavior at this time."
                    },
                    "StartDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "EndDate": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "SpendingAccountAssignment": {
                "type": "object",
                "example": {
                    "SpendingAccountID": "",
                    "UserID": "",
                    "UserGroupID": "",
                    "AllowExceed": false
                },
                "properties": {
                    "SpendingAccountID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    },
                    "UserGroupID": {
                        "type": "string"
                    },
                    "AllowExceed": {
                        "type": "boolean",
                        "description": "If true, a user can place an order for an amount greater than the available balance, causing the balance to go negative."
                    }
                }
            },
            "Supplier": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Active": false,
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "AllBuyersCanOrder": false,
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, all authentication is prohibited."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "AllBuyersCanOrder": {
                        "type": "boolean",
                        "description": "If false, buyers will only be able to set ToCompanyID on an order to the Marketplace Owner, or suppliers they have an explicit relationship to."
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "SupplierBuyer": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": ""
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    }
                }
            },
            "TokenPasswordReset": {
                "type": "object",
                "example": {
                    "NewPassword": ""
                },
                "properties": {
                    "NewPassword": {
                        "type": "string",
                        "format": "password"
                    }
                }
            },
            "User": {
                "type": "object",
                "example": {
                    "ID": "",
                    "CompanyID": "",
                    "Username": "",
                    "Password": "",
                    "FirstName": "",
                    "LastName": "",
                    "Email": "",
                    "Phone": "",
                    "TermsAccepted": "2018-01-01T00:00:00-06:00",
                    "Active": false,
                    "xp": {},
                    "AvailableRoles": [
                        ""
                    ],
                    "Locale": {
                        "ID": "",
                        "OwnerID": "",
                        "Currency": "",
                        "Language": ""
                    },
                    "DateCreated": "2018-01-01T00:00:00-06:00",
                    "PasswordLastSetDate": "2018-01-01T00:00:00-06:00"
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "CompanyID": {
                        "type": "string",
                        "readOnly": true
                    },
                    "Username": {
                        "type": "string",
                        "description": "Must be unique across the Marketplace.",
                        "maxLength": 100
                    },
                    "Password": {
                        "type": "string",
                        "format": "password"
                    },
                    "FirstName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "LastName": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Email": {
                        "type": "string",
                        "maxLength": 200
                    },
                    "Phone": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "TermsAccepted": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, authentication is prohibited."
                    },
                    "xp": {
                        "type": "object"
                    },
                    "AvailableRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of Roles currently available to the user via all SecurityProfile Assignments."
                    },
                    "Locale": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Locale"
                            }
                        ],
                        "readOnly": true,
                        "description": "Most specific Locale assigned to the user, if any."
                    },
                    "DateCreated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "PasswordLastSetDate": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "Can be used in conjunction with SecurityProfile.PasswordConfig to enforce password reset schedules."
                    }
                }
            },
            "UserGroup": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "UserGroupAssignment": {
                "type": "object",
                "example": {
                    "UserGroupID": "",
                    "UserID": ""
                },
                "properties": {
                    "UserGroupID": {
                        "type": "string"
                    },
                    "UserID": {
                        "type": "string"
                    }
                }
            },
            "UserOrderMoveOption": {
                "type": "string",
                "enum": [
                    "None",
                    "Unsubmitted",
                    "All"
                ],
                "description": ""
            },
            "Variant": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "Active": false,
                    "ShipWeight": 0,
                    "ShipHeight": 0,
                    "ShipWidth": 0,
                    "ShipLength": 0,
                    "Inventory": {
                        "QuantityAvailable": 0,
                        "LastUpdated": "2018-01-01T00:00:00-06:00"
                    },
                    "Specs": [
                        {
                            "SpecID": "",
                            "Name": "",
                            "OptionID": "",
                            "Value": "",
                            "PriceMarkupType": "NoMarkup",
                            "PriceMarkup": 0
                        }
                    ],
                    "xp": {}
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "Active": {
                        "type": "boolean",
                        "description": "If false, variant is not visible or purchasable from the Shopper perspective."
                    },
                    "ShipWeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipHeight": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipWidth": {
                        "type": "number",
                        "format": "float"
                    },
                    "ShipLength": {
                        "type": "number",
                        "format": "float"
                    },
                    "Inventory": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VariantInventory"
                            }
                        ]
                    },
                    "Specs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VariantSpec"
                        },
                        "readOnly": true
                    },
                    "xp": {
                        "type": "object"
                    }
                }
            },
            "VariantInventory": {
                "type": "object",
                "example": {
                    "QuantityAvailable": 0,
                    "LastUpdated": "2018-01-01T00:00:00-06:00"
                },
                "properties": {
                    "QuantityAvailable": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "LastUpdated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "VariantSpec": {
                "type": "object",
                "example": {
                    "SpecID": "",
                    "Name": "",
                    "OptionID": "",
                    "Value": "",
                    "PriceMarkupType": "NoMarkup",
                    "PriceMarkup": 0
                },
                "properties": {
                    "SpecID": {
                        "type": "string"
                    },
                    "Name": {
                        "type": "string",
                        "readOnly": true
                    },
                    "OptionID": {
                        "type": "string"
                    },
                    "Value": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "PriceMarkupType": {
                        "$ref": "#/components/schemas/PriceMarkupType"
                    },
                    "PriceMarkup": {
                        "type": "number",
                        "format": "float"
                    }
                }
            },
            "Webhook": {
                "type": "object",
                "example": {
                    "ID": "",
                    "Name": "",
                    "Description": "",
                    "Url": "",
                    "HashKey": "",
                    "ElevatedRoles": [
                        "ApiClientAdmin"
                    ],
                    "ConfigData": {},
                    "BeforeProcessRequest": false,
                    "ApiClientIDs": [
                        ""
                    ],
                    "WebhookRoutes": [
                        {
                            "Route": "",
                            "Verb": ""
                        }
                    ]
                },
                "properties": {
                    "ID": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "Name": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string",
                        "maxLength": 2000
                    },
                    "Url": {
                        "type": "string",
                        "description": "URL the WebHook will POST data to, likely a route within your middleware."
                    },
                    "HashKey": {
                        "type": "string",
                        "description": "Security feature that allows your middleware to verify the digital signature in the request header to ensure you only accept trusted data."
                    },
                    "ElevatedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiRole"
                        },
                        "description": "If you need additional data not provided by the WebHook payload, you can request any elevated roles needed to make additional calls."
                    },
                    "ConfigData": {
                        "type": "object"
                    },
                    "BeforeProcessRequest": {
                        "type": "boolean",
                        "description": "If true, the Webhook is processed prior to the call being made and OrderCloud waits for a response before proceeding."
                    },
                    "ApiClientIDs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of API ClientIDs the WebHook will be triggered for."
                    },
                    "WebhookRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebhookRoute"
                        },
                        "description": "List of routes the WebHook will be triggered for."
                    }
                }
            },
            "WebhookRoute": {
                "type": "object",
                "example": {
                    "Route": "",
                    "Verb": ""
                },
                "properties": {
                    "Route": {
                        "type": "string"
                    },
                    "Verb": {
                        "type": "string"
                    }
                }
            },
            "XpIndex": {
                "type": "object",
                "example": {
                    "ThingType": "Address",
                    "Key": ""
                },
                "properties": {
                    "ThingType": {
                        "$ref": "#/components/schemas/XpThingType"
                    },
                    "Key": {
                        "type": "string"
                    }
                }
            },
            "XpThingType": {
                "type": "string",
                "enum": [
                    "Address",
                    "Variant",
                    "Order",
                    "OrderReturn",
                    "LineItem",
                    "CostCenter",
                    "CreditCard",
                    "Payment",
                    "Spec",
                    "SpecOption",
                    "UserGroup",
                    "Company",
                    "Category",
                    "PriceSchedule",
                    "Shipment",
                    "SpendingAccount",
                    "User",
                    "Promotion",
                    "ApprovalRule",
                    "SellerApprovalRule",
                    "Catalog",
                    "ProductFacet",
                    "MessageSender",
                    "InventoryRecord",
                    "ProductCollection"
                ],
                "description": ""
            },
            "Authentication": {
                "type": "object",
                "properties": {
                    "access_token": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "paths": {
        "oauth/certs/{ID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns a JSON Web Key (JWK). Can be used for validating the token was signed by OrderCloud.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PublicKey"
                                }
                            }
                        }
                    }
                },
                "operationId": "Certs.GetPublicKey",
                "tags": [
                    "Certs"
                ],
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "description": "ID of the public key.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single cert public key.",
                "description": "Returns a JSON Web Key (JWK). Can be used for validating the token was signed by OrderCloud.",
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "/addresses": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Address"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminAddresses.List",
                "tags": [
                    "Admin Addresses"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressName",
                                    "CompanyName",
                                    "City",
                                    "Street1",
                                    "Street2",
                                    "LastName",
                                    "FirstName",
                                    "State",
                                    "Zip"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "AddressName",
                                    "ID",
                                    "DateCreated",
                                    "CompanyName",
                                    "FirstName",
                                    "LastName",
                                    "Street1",
                                    "Street2",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country",
                                    "Phone",
                                    "!AddressName",
                                    "!ID",
                                    "!DateCreated",
                                    "!CompanyName",
                                    "!FirstName",
                                    "!LastName",
                                    "!Street1",
                                    "!Street2",
                                    "!City",
                                    "!State",
                                    "!Zip",
                                    "!Country",
                                    "!Phone"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of admin addresses.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin",
                            "AdminAddressReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminAddresses.Create",
                "tags": [
                    "Admin Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new admin address.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/addresses/{addressID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminAddresses.Get",
                "tags": [
                    "Admin Addresses"
                ],
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single admin address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin",
                            "AdminAddressReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminAddresses.Save",
                "tags": [
                    "Admin Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an admin address.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "AdminAddresses.Delete",
                "tags": [
                    "Admin Addresses"
                ],
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an admin address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminAddresses.Patch",
                "tags": [
                    "Admin Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an admin address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/adminusers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUsers.List",
                "tags": [
                    "Admin Users"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of admin users.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin",
                            "AdminUserReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUsers.Create",
                "tags": [
                    "Admin Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new admin user.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/adminusers/{userID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUsers.Get",
                "tags": [
                    "Admin Users"
                ],
                "parameters": [
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single admin user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin",
                            "AdminUserReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUsers.Save",
                "tags": [
                    "Admin Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an admin user.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "AdminUsers.Delete",
                "tags": [
                    "Admin Users"
                ],
                "parameters": [
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an admin user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUsers.Patch",
                "tags": [
                    "Admin Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an admin user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/apiclients": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ApiClient"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.List",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AppName",
                                    "DefaultContextUserName"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AppName",
                                    "DefaultContextUserName",
                                    "!ID",
                                    "!AppName",
                                    "!DefaultContextUserName"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of API clients.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin",
                            "ApiClientReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiClient"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.Create",
                "tags": [
                    "Api Clients"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApiClient"
                                    }
                                ],
                                "required": [
                                    "AccessTokenDuration",
                                    "AppName"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new API client.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            }
        },
        "/apiclients/{apiClientID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiClient"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.Get",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single API client.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin",
                            "ApiClientReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiClient"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.Save",
                "tags": [
                    "Api Clients"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApiClient"
                                    }
                                ],
                                "required": [
                                    "AccessTokenDuration",
                                    "AppName"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Update an API client.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ApiClients.Delete",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a API client.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiClient"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.Patch",
                "tags": [
                    "Api Clients"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApiClient"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a API client.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            }
        },
        "/apiclients/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ApiClientAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "ApiClients.ListAssignments",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "query",
                        "description": "ID of the api client.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of API client assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin",
                            "ApiClientReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ApiClients.SaveAssignment",
                "tags": [
                    "Api Clients"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApiClientAssignment"
                                    }
                                ],
                                "required": [
                                    "ApiClientID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a API client assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            }
        },
        "/approvalrules": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SellerApprovalRule"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SellerApprovalRules.List",
                "tags": [
                    "Seller Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description",
                                    "RuleExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "ApprovingGroupID",
                                    "RuleExpression",
                                    "!Name",
                                    "!ID",
                                    "!ApprovingGroupID",
                                    "!RuleExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of seller approval rules.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "ApprovalRuleReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SellerApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "SellerApprovalRules.Create",
                "tags": [
                    "Seller Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SellerApprovalRule"
                                    }
                                ],
                                "required": [
                                    "ApprovalType",
                                    "ApprovingGroupID",
                                    "RuleExpression"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new seller approval rule.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/approvalrules/{approvalRuleID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SellerApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "SellerApprovalRules.Get",
                "tags": [
                    "Seller Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single seller approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "ApprovalRuleReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SellerApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "SellerApprovalRules.Save",
                "tags": [
                    "Seller Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SellerApprovalRule"
                                    }
                                ],
                                "required": [
                                    "ApprovalType",
                                    "ApprovingGroupID",
                                    "RuleExpression"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a seller approval rule.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SellerApprovalRules.Delete",
                "tags": [
                    "Seller Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a seller approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SellerApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "SellerApprovalRules.Patch",
                "tags": [
                    "Seller Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SellerApprovalRule"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a seller approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Buyer"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.List",
                "tags": [
                    "Buyers"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "DateCreated",
                                    "!ID",
                                    "!Name",
                                    "!DateCreated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of buyers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin",
                            "BuyerReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buyer"
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.Create",
                "tags": [
                    "Buyers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Buyer"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new buyer.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buyer"
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.Get",
                "tags": [
                    "Buyers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin",
                            "BuyerReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buyer"
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.Save",
                "tags": [
                    "Buyers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Buyer"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a buyer.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Buyers.Delete",
                "tags": [
                    "Buyers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buyer"
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.Patch",
                "tags": [
                    "Buyers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Buyer"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/addresses": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Address"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.List",
                "tags": [
                    "Addresses"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressName",
                                    "CompanyName",
                                    "City",
                                    "Street1",
                                    "Street2",
                                    "LastName",
                                    "FirstName",
                                    "State",
                                    "Zip"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "AddressName",
                                    "ID",
                                    "DateCreated",
                                    "CompanyName",
                                    "FirstName",
                                    "LastName",
                                    "Street1",
                                    "Street2",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country",
                                    "Phone",
                                    "!AddressName",
                                    "!ID",
                                    "!DateCreated",
                                    "!CompanyName",
                                    "!FirstName",
                                    "!LastName",
                                    "!Street1",
                                    "!Street2",
                                    "!City",
                                    "!State",
                                    "!Zip",
                                    "!Country",
                                    "!Phone"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of addresses.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin",
                            "AddressReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.Create",
                "tags": [
                    "Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new address.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/addresses/{addressID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.Get",
                "tags": [
                    "Addresses"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin",
                            "AddressReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.Save",
                "tags": [
                    "Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an address.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Addresses.Delete",
                "tags": [
                    "Addresses"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.Patch",
                "tags": [
                    "Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/addresses/{addressID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Addresses.DeleteAssignment",
                "tags": [
                    "Addresses"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an address assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/addresses/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/AddressAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Addresses.ListAssignments",
                "tags": [
                    "Addresses"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "query",
                        "description": "ID of the address.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the address assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "isShipping",
                        "in": "query",
                        "description": "Is shipping of the address assignment.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "isBilling",
                        "in": "query",
                        "description": "Is billing of the address assignment.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of address assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin",
                            "AddressReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Addresses.SaveAssignment",
                "tags": [
                    "Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/AddressAssignment"
                                    }
                                ],
                                "required": [
                                    "AddressID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an address assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/ApiClients/Assignments/{apiClientID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ApiClients.DeleteBuyerAssignment",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a API client buyer assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/approvalrules": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ApprovalRule"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "ApprovalRules.List",
                "tags": [
                    "Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description",
                                    "RuleExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "ApprovingGroupID",
                                    "RuleExpression",
                                    "!Name",
                                    "!ID",
                                    "!ApprovingGroupID",
                                    "!RuleExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of approval rules.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin",
                            "ApprovalRuleReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApprovalRules.Create",
                "tags": [
                    "Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApprovalRule"
                                    }
                                ],
                                "required": [
                                    "ApprovingGroupID",
                                    "RuleExpression"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new approval rule.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/approvalrules/{approvalRuleID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApprovalRules.Get",
                "tags": [
                    "Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin",
                            "ApprovalRuleReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApprovalRules.Save",
                "tags": [
                    "Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApprovalRule"
                                    }
                                ],
                                "required": [
                                    "ApprovingGroupID",
                                    "RuleExpression"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an approval rule.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ApprovalRules.Delete",
                "tags": [
                    "Approval Rules"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApprovalRule"
                                }
                            }
                        }
                    }
                },
                "operationId": "ApprovalRules.Patch",
                "tags": [
                    "Approval Rules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApprovalRule"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "approvalRuleID",
                        "in": "path",
                        "description": "ID of the approval rule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an approval rule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApprovalRuleAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/costcenters": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CostCenter"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.List",
                "tags": [
                    "Cost Centers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of cost centers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin",
                            "CostCenterReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostCenter"
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.Create",
                "tags": [
                    "Cost Centers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CostCenter"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new cost center.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/costcenters/{costCenterID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostCenter"
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.Get",
                "tags": [
                    "Cost Centers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "path",
                        "description": "ID of the cost center.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single cost center.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin",
                            "CostCenterReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostCenter"
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.Save",
                "tags": [
                    "Cost Centers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CostCenter"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "path",
                        "description": "ID of the cost center.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a cost center.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CostCenters.Delete",
                "tags": [
                    "Cost Centers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "path",
                        "description": "ID of the cost center.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cost center.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CostCenter"
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.Patch",
                "tags": [
                    "Cost Centers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CostCenter"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "path",
                        "description": "ID of the cost center.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a cost center.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/costcenters/{costCenterID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CostCenters.DeleteAssignment",
                "tags": [
                    "Cost Centers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "path",
                        "description": "ID of the cost center.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cost center assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/costcenters/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CostCenterAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "CostCenters.ListAssignments",
                "tags": [
                    "Cost Centers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "costCenterID",
                        "in": "query",
                        "description": "ID of the cost center.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the cost center assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of cost center assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin",
                            "CostCenterReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CostCenters.SaveAssignment",
                "tags": [
                    "Cost Centers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CostCenterAssignment"
                                    }
                                ],
                                "required": [
                                    "CostCenterID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a cost center assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CostCenterAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/creditcards": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CreditCard"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.List",
                "tags": [
                    "Credit Cards"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "CardholderName",
                                    "CardType",
                                    "ExpirationDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "CardholderName",
                                    "CardType",
                                    "ExpirationDate",
                                    "DateCreated",
                                    "!ID",
                                    "!CardholderName",
                                    "!CardType",
                                    "!ExpirationDate",
                                    "!DateCreated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of credit cards.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin",
                            "CreditCardReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.Create",
                "tags": [
                    "Credit Cards"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new credit card.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/creditcards/{creditCardID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.Get",
                "tags": [
                    "Credit Cards"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "path",
                        "description": "ID of the credit card.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single credit card.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin",
                            "CreditCardReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.Save",
                "tags": [
                    "Credit Cards"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "path",
                        "description": "ID of the credit card.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a credit card.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CreditCards.Delete",
                "tags": [
                    "Credit Cards"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "path",
                        "description": "ID of the credit card.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a credit card.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.Patch",
                "tags": [
                    "Credit Cards"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "path",
                        "description": "ID of the credit card.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a credit card.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/creditcards/{creditCardID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CreditCards.DeleteAssignment",
                "tags": [
                    "Credit Cards"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "path",
                        "description": "ID of the credit card.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a credit card assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/creditcards/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CreditCardAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "CreditCards.ListAssignments",
                "tags": [
                    "Credit Cards"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "creditCardID",
                        "in": "query",
                        "description": "ID of the credit card.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the credit card assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of credit card assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin",
                            "CreditCardReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "CreditCards.SaveAssignment",
                "tags": [
                    "Credit Cards"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CreditCardAssignment"
                                    }
                                ],
                                "required": [
                                    "CreditCardID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a credit card assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/sellers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerSupplier"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Buyers.ListBuyerSellers",
                "tags": [
                    "Buyers"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of buyer buyer sellers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerAdmin",
                            "BuyerReader"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/spendingaccounts": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SpendingAccount"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.List",
                "tags": [
                    "Spending Accounts"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "RedemptionCode"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of spending accounts.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin",
                            "SpendingAccountReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpendingAccount"
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.Create",
                "tags": [
                    "Spending Accounts"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpendingAccount"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "Balance"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new spending account.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/spendingaccounts/{spendingAccountID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpendingAccount"
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.Get",
                "tags": [
                    "Spending Accounts"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single spending account.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin",
                            "SpendingAccountReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpendingAccount"
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.Save",
                "tags": [
                    "Spending Accounts"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpendingAccount"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "Balance"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a spending account.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SpendingAccounts.Delete",
                "tags": [
                    "Spending Accounts"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a spending account.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpendingAccount"
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.Patch",
                "tags": [
                    "Spending Accounts"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpendingAccount"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a spending account.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/spendingaccounts/{spendingAccountID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SpendingAccounts.DeleteAssignment",
                "tags": [
                    "Spending Accounts"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a spending account assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/spendingaccounts/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SpendingAccountAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SpendingAccounts.ListAssignments",
                "tags": [
                    "Spending Accounts"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "spendingAccountID",
                        "in": "query",
                        "description": "ID of the spending account.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the spending account assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of spending account assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin",
                            "SpendingAccountReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SpendingAccounts.SaveAssignment",
                "tags": [
                    "Spending Accounts"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpendingAccountAssignment"
                                    }
                                ],
                                "required": [
                                    "SpendingAccountID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a spending account assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SpendingAccountAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/usergroups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroup"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.List",
                "tags": [
                    "User Groups"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of user groups.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin",
                            "UserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.Create",
                "tags": [
                    "User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new user group.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/usergroups/{userGroupID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.Get",
                "tags": [
                    "User Groups"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin",
                            "UserGroupReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.Save",
                "tags": [
                    "User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a user group.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "UserGroups.Delete",
                "tags": [
                    "User Groups"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.Patch",
                "tags": [
                    "User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/usergroups/{userGroupID}/assignments/{userID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "UserGroups.DeleteUserAssignment",
                "tags": [
                    "User Groups"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/usergroups/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroupAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "UserGroups.ListUserAssignments",
                "tags": [
                    "User Groups"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of user group user assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin",
                            "UserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "UserGroups.SaveUserAssignment",
                "tags": [
                    "User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroupAssignment"
                                    }
                                ],
                                "required": [
                                    "UserGroupID",
                                    "UserID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "UserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.List",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of users.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin",
                            "BuyerUserReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.Create",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new user.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/users/{userID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.Get",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin",
                            "BuyerUserReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.Save",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a user.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Users.Delete",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.Patch",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/users/{userID}/accesstoken": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessToken"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.GetAccessToken",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ImpersonateTokenRequest"
                                    }
                                ],
                                "required": [
                                    "ClientID",
                                    "Roles"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single user access token.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerImpersonation"
                        ]
                    }
                ]
            }
        },
        "/buyers/{buyerID}/users/{userID}/moveto/{newBuyerID}": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.Move",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "newBuyerID",
                        "in": "path",
                        "description": "ID of the new buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orders",
                        "in": "query",
                        "description": "Orders of the user. Possible values: None, Unsubmitted, All.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UserOrderMoveOption"
                        }
                    }
                ],
                "summary": "Move a user to a different buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/buyerusers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Users.ListAcrossBuyers",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of user across buyers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "BuyerUserReader"
                        ]
                    }
                ]
            }
        },
        "/cart": {
            "get": {
                "responses": {
                    "200": {
                        "description": "If the ID of the Order returned is null, the cart has not yet been interacted with. Once an item is added, the Order.ID will be populated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.Get",
                "tags": [
                    "Cart"
                ],
                "summary": "Get a single cart.",
                "description": "If the ID of the Order returned is null, the cart has not yet been interacted with. Once an item is added, the Order.ID will be populated.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten..The recommended way to initiate a new cart is to add a line item. If there is a specific reason an order needs to exist prior to adding a line item, this method can be used to initiate a new cart. It can also be used for updates.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.Save",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a cart.",
                "description": "If an object with the same ID already exists, it will be overwritten.<br/></br>The recommended way to initiate a new cart is to add a line item. If there is a specific reason an order needs to exist prior to adding a line item, this method can be used to initiate a new cart. It can also be used for updates.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Empties the cart. Any promotions, payments or other items associated with the cart will also be removed."
                    }
                },
                "operationId": "Cart.Delete",
                "tags": [
                    "Cart"
                ],
                "summary": "Delete a cart.",
                "description": "Empties the cart. Any promotions, payments or other items associated with the cart will also be removed.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.Patch",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Partially update a cart.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/{orderID}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.SetActiveCart",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set an active cart.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/estimateshipping": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.EstimateShipping",
                "tags": [
                    "Cart"
                ],
                "summary": "Estimate a shipping.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/fromuser": {
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.PatchFromUser",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Partially update a cart from user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/lineitems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LineItem"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.ListLineItems",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateAdded",
                                    "ID",
                                    "ProductID",
                                    "!DateAdded",
                                    "!ID",
                                    "!ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of cart line items.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Adds a line item to the cart",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.CreateLineItem",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ],
                                "required": [
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new cart line item.",
                "description": "Adds a line item to the cart",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/lineitems/{lineItemID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.GetLineItem",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single cart line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.SaveLineItem",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ],
                                "required": [
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a cart line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.DeleteLineItem",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cart line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.PatchLineItem",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a cart line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/payments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Payment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.ListPayments",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateCreated",
                                    "ID",
                                    "Type",
                                    "CreditCardID",
                                    "SpendingAccountID",
                                    "!DateCreated",
                                    "!ID",
                                    "!Type",
                                    "!CreditCardID",
                                    "!SpendingAccountID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of cart payments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.CreatePayment",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Payment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new cart payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/payments/{paymentID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.GetPayment",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single cart payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.DeletePayment",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cart payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.PatchPayment",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Payment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a cart payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/payments/{paymentID}/transactions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentTransaction"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.CreatePaymentTransaction",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PaymentTransaction"
                                    }
                                ],
                                "required": [
                                    "Type",
                                    "DateExecuted"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new cart payment transaction.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/payments/{paymentID}/transactions/{transactionID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.DeletePaymentTransaction",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transactionID",
                        "in": "path",
                        "description": "ID of the transaction.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cart payment transaction.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/promotions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderPromotion"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.ListPromotions",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Code",
                                    "Description",
                                    "FinePrint",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "Code",
                                    "StartDate",
                                    "ExpirationDate",
                                    "EligibleExpression",
                                    "ValueExpression",
                                    "CanCombine",
                                    "!Name",
                                    "!ID",
                                    "!Code",
                                    "!StartDate",
                                    "!ExpirationDate",
                                    "!EligibleExpression",
                                    "!ValueExpression",
                                    "!CanCombine"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of cart promotions.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/promotions/{promoCode}": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPromotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.AddPromotion",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "promoCode",
                        "in": "path",
                        "description": "Promo code of the order promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Add a promotion.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.DeletePromotion",
                "tags": [
                    "Cart"
                ],
                "parameters": [
                    {
                        "name": "promoCode",
                        "in": "path",
                        "description": "Promo code of the cart.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a cart promotion.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/shipmethods": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.SelectShipMethods",
                "tags": [
                    "Cart"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderShipMethodSelection"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Select a ship methods.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/submit": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.Submit",
                "tags": [
                    "Cart"
                ],
                "summary": "Submit a cart submit.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/validate": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Cart.Validate",
                "tags": [
                    "Cart"
                ],
                "summary": "Validate a cart validate.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/cart/worksheet": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "Cart.GetOrderWorksheet",
                "tags": [
                    "Cart"
                ],
                "summary": "Get a single cart order worksheet.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/catalogs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Catalog"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.List",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of catalogs.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin",
                            "CatalogReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.Create",
                "tags": [
                    "Catalogs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Catalog"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new catalog.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.Get",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single catalog.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin",
                            "CatalogReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.Save",
                "tags": [
                    "Catalogs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Catalog"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a catalog.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Catalogs.Delete",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a catalog.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.Patch",
                "tags": [
                    "Catalogs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Catalog"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a catalog.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Catalogs.DeleteAssignment",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a catalog assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.List",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "depth",
                        "in": "query",
                        "description": "Depth of the category.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "!ID",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of categories.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin",
                            "CategoryReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.Create",
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new category.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories/{categoryID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.Get",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single category.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin",
                            "CategoryReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.Save",
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a category.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Deleting a parent category will also delete all of that category's children."
                    }
                },
                "operationId": "Categories.Delete",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a category.",
                "description": "Deleting a parent category will also delete all of that category's children.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.Patch",
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a category.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories/{categoryID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Categories.DeleteAssignment",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a category assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories/{categoryID}/productassignments/{productID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Categories.DeleteProductAssignment",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a category product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CategoryAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.ListAssignments",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "query",
                        "description": "ID of the category.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the category assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of category assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin",
                            "CategoryReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Categories.SaveAssignment",
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CategoryAssignment"
                                    }
                                ],
                                "required": [
                                    "CategoryID",
                                    "BuyerID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a category assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/categories/productassignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CategoryProductAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Categories.ListProductAssignments",
                "tags": [
                    "Categories"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "query",
                        "description": "ID of the category.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "ID of the product.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of category product assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin",
                            "CategoryReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Categories.SaveProductAssignment",
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CategoryProductAssignment"
                                    }
                                ],
                                "required": [
                                    "CategoryID",
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a category product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CategoryAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/{catalogID}/productassignments/{productID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Catalogs.DeleteProductAssignment",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a catalog product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CatalogAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.ListAssignments",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of catalog assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin",
                            "CatalogReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Catalogs.SaveAssignment",
                "tags": [
                    "Catalogs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CatalogAssignment"
                                    }
                                ],
                                "required": [
                                    "CatalogID",
                                    "BuyerID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a catalog assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/catalogs/productassignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductCatalogAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Catalogs.ListProductAssignments",
                "tags": [
                    "Catalogs"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "ID of the product.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of catalog product assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin",
                            "CatalogReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Catalogs.SaveProductAssignment",
                "tags": [
                    "Catalogs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductCatalogAssignment"
                                    }
                                ],
                                "required": [
                                    "CatalogID",
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a catalog product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "CatalogAdmin"
                        ]
                    }
                ]
            }
        },
        "/impersonationconfig": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ImpersonationConfig"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "ImpersonationConfigs.List",
                "tags": [
                    "Impersonation Configs"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ImpersonationBuyerID",
                                    "ImpersonationGroupID",
                                    "ImpersonationUserID",
                                    "BuyerID",
                                    "GroupID",
                                    "UserID",
                                    "SecurityProfileID",
                                    "ClientID",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ImpersonationBuyerID",
                                    "ImpersonationGroupID",
                                    "ImpersonationUserID",
                                    "BuyerID",
                                    "GroupID",
                                    "UserID",
                                    "SecurityProfileID",
                                    "ClientID",
                                    "ID",
                                    "!ImpersonationBuyerID",
                                    "!ImpersonationGroupID",
                                    "!ImpersonationUserID",
                                    "!BuyerID",
                                    "!GroupID",
                                    "!UserID",
                                    "!SecurityProfileID",
                                    "!ClientID",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of impersonation configs.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImpersonationConfig"
                                }
                            }
                        }
                    }
                },
                "operationId": "ImpersonationConfigs.Create",
                "tags": [
                    "Impersonation Configs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ImpersonationConfig"
                                    }
                                ],
                                "required": [
                                    "BuyerID",
                                    "SecurityProfileID",
                                    "ClientID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new impersonation config.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/impersonationconfig/{impersonationConfigID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImpersonationConfig"
                                }
                            }
                        }
                    }
                },
                "operationId": "ImpersonationConfigs.Get",
                "tags": [
                    "Impersonation Configs"
                ],
                "parameters": [
                    {
                        "name": "impersonationConfigID",
                        "in": "path",
                        "description": "ID of the impersonation config.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single impersonation config.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImpersonationConfig"
                                }
                            }
                        }
                    }
                },
                "operationId": "ImpersonationConfigs.Save",
                "tags": [
                    "Impersonation Configs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ImpersonationConfig"
                                    }
                                ],
                                "required": [
                                    "BuyerID",
                                    "SecurityProfileID",
                                    "ClientID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "impersonationConfigID",
                        "in": "path",
                        "description": "ID of the impersonation config.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an impersonation config.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ImpersonationConfigs.Delete",
                "tags": [
                    "Impersonation Configs"
                ],
                "parameters": [
                    {
                        "name": "impersonationConfigID",
                        "in": "path",
                        "description": "ID of the impersonation config.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an impersonation config.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImpersonationConfig"
                                }
                            }
                        }
                    }
                },
                "operationId": "ImpersonationConfigs.Patch",
                "tags": [
                    "Impersonation Configs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ImpersonationConfig"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "impersonationConfigID",
                        "in": "path",
                        "description": "ID of the impersonation config.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an impersonation config.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/incrementors": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Incrementor"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Incrementors.List",
                "tags": [
                    "Incrementors"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "!ID",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of incrementors.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin",
                            "IncrementorReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Incrementor"
                                }
                            }
                        }
                    }
                },
                "operationId": "Incrementors.Create",
                "tags": [
                    "Incrementors"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Incrementor"
                                    }
                                ],
                                "required": [
                                    "LastNumber",
                                    "LeftPaddingCount"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new incrementor.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin"
                        ]
                    }
                ]
            }
        },
        "/incrementors/{incrementorID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Incrementor"
                                }
                            }
                        }
                    }
                },
                "operationId": "Incrementors.Get",
                "tags": [
                    "Incrementors"
                ],
                "parameters": [
                    {
                        "name": "incrementorID",
                        "in": "path",
                        "description": "ID of the incrementor.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single incrementor.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin",
                            "IncrementorReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Incrementor"
                                }
                            }
                        }
                    }
                },
                "operationId": "Incrementors.Save",
                "tags": [
                    "Incrementors"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Incrementor"
                                    }
                                ],
                                "required": [
                                    "LastNumber",
                                    "LeftPaddingCount"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "incrementorID",
                        "in": "path",
                        "description": "ID of the incrementor.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an incrementor.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Incrementors.Delete",
                "tags": [
                    "Incrementors"
                ],
                "parameters": [
                    {
                        "name": "incrementorID",
                        "in": "path",
                        "description": "ID of the incrementor.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an incrementor.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Incrementor"
                                }
                            }
                        }
                    }
                },
                "operationId": "Incrementors.Patch",
                "tags": [
                    "Incrementors"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Incrementor"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "incrementorID",
                        "in": "path",
                        "description": "ID of the incrementor.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an incrementor.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IncrementorAdmin"
                        ]
                    }
                ]
            }
        },
        "/integrationEvents": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/IntegrationEvent"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.List",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "EventType",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "EventType",
                                    "Name",
                                    "!ID",
                                    "!EventType",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of integration events.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "IntegrationEventReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationEvent"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.Create",
                "tags": [
                    "Integration Events"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/IntegrationEvent"
                                    }
                                ],
                                "required": [
                                    "CustomImplementationUrl",
                                    "Name",
                                    "HashKey"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new integration event.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin"
                        ]
                    }
                ]
            }
        },
        "/integrationEvents/{integrationEventID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationEvent"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.Get",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "integrationEventID",
                        "in": "path",
                        "description": "ID of the integration event.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single integration event.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "IntegrationEventReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationEvent"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.Save",
                "tags": [
                    "Integration Events"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/IntegrationEvent"
                                    }
                                ],
                                "required": [
                                    "CustomImplementationUrl",
                                    "Name",
                                    "HashKey"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "integrationEventID",
                        "in": "path",
                        "description": "ID of the integration event.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an integration event.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "IntegrationEvents.Delete",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "integrationEventID",
                        "in": "path",
                        "description": "ID of the integration event.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an integration event.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IntegrationEvent"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.Patch",
                "tags": [
                    "Integration Events"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/IntegrationEvent"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "integrationEventID",
                        "in": "path",
                        "description": "ID of the integration event.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an integration event.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin"
                        ]
                    }
                ]
            }
        },
        "/lineitems/{direction}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ExtendedLineItem"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.ListAcrossOrders",
                "tags": [
                    "Line Items"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Lower bound of date range that the order was created.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Upper bound of date range that the order was created.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateAdded",
                                    "ID",
                                    "ProductID",
                                    "!DateAdded",
                                    "!ID",
                                    "!ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of line item across orders.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/locales": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Locale"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.List",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Currency"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of locales.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin",
                            "LocaleReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Locale"
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.Create",
                "tags": [
                    "Locales"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Locale"
                                    }
                                ],
                                "required": [
                                    "Currency"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new locale.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin"
                        ]
                    }
                ]
            }
        },
        "/locales/{localeID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Locale"
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.Get",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "localeID",
                        "in": "path",
                        "description": "ID of the locale.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single locale.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin",
                            "LocaleReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Locale"
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.Save",
                "tags": [
                    "Locales"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Locale"
                                    }
                                ],
                                "required": [
                                    "Currency"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "localeID",
                        "in": "path",
                        "description": "ID of the locale.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a locale.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Locales.Delete",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "localeID",
                        "in": "path",
                        "description": "ID of the locale.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a locale.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Locale"
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.Patch",
                "tags": [
                    "Locales"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Locale"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "localeID",
                        "in": "path",
                        "description": "ID of the locale.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a locale.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin"
                        ]
                    }
                ]
            }
        },
        "/locales/{localeID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Locales.DeleteAssignment",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "localeID",
                        "in": "path",
                        "description": "ID of the locale.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a locale assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin",
                            "PromotionAdmin"
                        ]
                    }
                ]
            }
        },
        "/locales/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LocaleAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Locales.ListAssignments",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "localeID",
                        "in": "query",
                        "description": "ID of the locale.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the locale assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of locale assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin",
                            "LocaleReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": "Do not assign a user multiple groups with different assigned locales. That is considered a misconfiguration, and will yield unexpected results."
                    }
                },
                "operationId": "Locales.SaveAssignment",
                "tags": [
                    "Locales"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LocaleAssignment"
                                    }
                                ],
                                "required": [
                                    "LocaleID",
                                    "BuyerID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a locale assignment.",
                "description": "Do not assign a user multiple groups with different assigned locales. That is considered a misconfiguration, and will yield unexpected results.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "LocaleAdmin"
                        ]
                    }
                ]
            }
        },
        "/me": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeUser"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.Get",
                "tags": [
                    "Me"
                ],
                "summary": "Get the Current Authenticated User",
                "description": "",
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeUser"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.Save",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MeUser"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "summary": "Update the Currently Authenticated User",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeUser"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.Patch",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MeUser"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Patch the Currently Authenticated User.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAdmin"
                        ]
                    }
                ]
            }
        },
        "/me/addresses": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerAddress"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListAddresses",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressName",
                                    "CompanyName",
                                    "City",
                                    "Street1",
                                    "Street2",
                                    "LastName",
                                    "FirstName",
                                    "State",
                                    "Zip"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "AddressName",
                                    "ID",
                                    "DateCreated",
                                    "CompanyName",
                                    "FirstName",
                                    "LastName",
                                    "Street1",
                                    "Street2",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country",
                                    "Phone",
                                    "!AddressName",
                                    "!ID",
                                    "!DateCreated",
                                    "!CompanyName",
                                    "!FirstName",
                                    "!LastName",
                                    "!Street1",
                                    "!Street2",
                                    "!City",
                                    "!State",
                                    "!Zip",
                                    "!Country",
                                    "!Phone"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of addresses visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Only available to Buyer Users. Addresses created using this endpoint are considered private, and only accessible to the user who created them.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerAddress"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.CreateAddress",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerAddress"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new address.",
                "description": "Only available to Buyer Users. Addresses created using this endpoint are considered private, and only accessible to the user who created them.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/me/addresses/{addressID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerAddress"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetAddress",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single address.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerAddress"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.SaveAddress",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerAddress"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Update an address.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.DeleteAddress",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an address.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.PatchAddress",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerAddress"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an address.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/me/catalogs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Catalog"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListCatalogs",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "name": "sellerID",
                        "in": "query",
                        "description": "ID of the seller.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a list of catalogs visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/catalogs/{catalogID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetCatalog",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "path",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single catalog.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/categories": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Category"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListCategories",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "depth",
                        "in": "query",
                        "description": "Indicates how deep down the hierarchy to return results. Valid values are a number of 1 or greater, or 'all'. Relative to ParentID if specified. Default is 1.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "The user’s default CatalogID will be used to return categories if you do not pass another CatalogID explicitly. Listing categories across multiple catalogs is not supported.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "ID of the product.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "!ID",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of categories visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/categories/{categoryID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetCategory",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "categoryID",
                        "in": "path",
                        "description": "ID of the category.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single category.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/costcenters": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/CostCenter"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListCostCenters",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of cost centers visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/creditcards": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerCreditCard"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListCreditCards",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "CardholderName",
                                    "CardType",
                                    "ExpirationDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "CardholderName",
                                    "CardType",
                                    "ExpirationDate",
                                    "DateCreated",
                                    "!ID",
                                    "!CardholderName",
                                    "!CardType",
                                    "!ExpirationDate",
                                    "!DateCreated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of credit cards visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Only available to Buyer Users. Credit Cards created using this endpoint are considered private, and only accessible to the user who created them.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerCreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.CreateCreditCard",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerCreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new credit card.",
                "description": "Only available to Buyer Users. Credit Cards created using this endpoint are considered private, and only accessible to the user who created them.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/me/creditcards/{creditcardID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerCreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetCreditCard",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "creditcardID",
                        "in": "path",
                        "description": "ID of the creditcard.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single credit card.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerCreditCard"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.SaveCreditCard",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerCreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "creditcardID",
                        "in": "path",
                        "description": "ID of the creditcard.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Update a credit card.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.DeleteCreditCard",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "creditcardID",
                        "in": "path",
                        "description": "ID of the creditcard.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a credit card.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.PatchCreditCard",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/BuyerCreditCard"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "creditcardID",
                        "in": "path",
                        "description": "ID of the creditcard.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a credit card.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MeCreditCardAdmin"
                        ]
                    }
                ]
            }
        },
        "/me/orders": {
            "get": {
                "responses": {
                    "200": {
                        "description": "List orders created by this user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Order"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListOrders",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "Comments"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateSubmitted",
                                    "DateCreated",
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "FromUserID",
                                    "Status",
                                    "DateApproved",
                                    "DateDeclined",
                                    "DateCanceled",
                                    "DateCompleted",
                                    "LastUpdated",
                                    "Subtotal",
                                    "ShippingCost",
                                    "TaxCost",
                                    "PromotionDiscount",
                                    "Total",
                                    "IsSubmitted",
                                    "!DateSubmitted",
                                    "!DateCreated",
                                    "!ID",
                                    "!FromCompanyID",
                                    "!ToCompanyID",
                                    "!FromUserID",
                                    "!Status",
                                    "!DateApproved",
                                    "!DateDeclined",
                                    "!DateCanceled",
                                    "!DateCompleted",
                                    "!LastUpdated",
                                    "!Subtotal",
                                    "!ShippingCost",
                                    "!TaxCost",
                                    "!PromotionDiscount",
                                    "!Total",
                                    "!IsSubmitted"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of orders visible to this user.",
                "description": "List orders created by this user.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "204": {
                        "description": "If a user begins an order as the anonymous shopper and later logs in, use this endpoint to transfer that order to them."
                    }
                },
                "operationId": "Me.TransferAnonUserOrder",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "anonUserToken",
                        "in": "query",
                        "description": "Anon user token of the me.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Transfer an order.",
                "description": "If a user begins an order as the anonymous shopper and later logs in, use this endpoint to transfer that order to them.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/orders/approvable": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Order"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListApprovableOrders",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Lower bound of date range that the order was created (if outgoing) or submitted (if incoming).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Upper bound of date range that the order was created (if outgoing) or submitted (if incoming).",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "Comments"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateSubmitted",
                                    "DateCreated",
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "FromUserID",
                                    "Status",
                                    "DateApproved",
                                    "DateDeclined",
                                    "DateCanceled",
                                    "DateCompleted",
                                    "LastUpdated",
                                    "Subtotal",
                                    "ShippingCost",
                                    "TaxCost",
                                    "PromotionDiscount",
                                    "Total",
                                    "IsSubmitted",
                                    "!DateSubmitted",
                                    "!DateCreated",
                                    "!ID",
                                    "!FromCompanyID",
                                    "!ToCompanyID",
                                    "!FromUserID",
                                    "!Status",
                                    "!DateApproved",
                                    "!DateDeclined",
                                    "!DateCanceled",
                                    "!DateCompleted",
                                    "!LastUpdated",
                                    "!Subtotal",
                                    "!ShippingCost",
                                    "!TaxCost",
                                    "!PromotionDiscount",
                                    "!Total",
                                    "!IsSubmitted"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of orders that this user can approve.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/password": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Me.ResetPasswordByToken",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/TokenPasswordReset"
                                    }
                                ],
                                "required": [
                                    "NewPassword"
                                ]
                            }
                        }
                    }
                },
                "summary": "Reset a password by token.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PasswordReset"
                        ]
                    }
                ]
            }
        },
        "/me/productcollections": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductCollection"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListProductCollections",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product collections visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductCollection"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.CreateProductCollection",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductCollection"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new product collection.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/productcollections/{productCollectionID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductCollection"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetProductCollection",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single product collection.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductCollection"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.SaveProductCollection",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductCollection"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a product collection.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.DeleteProductCollection",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a product collection.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductCollection"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.PatchProductCollection",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductCollection"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a product collection.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/productcollections/{productCollectionID}/{productID}": {
            "put": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.CreateProductCollectionEntry",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new product collection entry.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": "Only available to Buyer Users."
                    }
                },
                "operationId": "Me.DeleteProductCollectionEntry",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a product collection entry.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/productcollections/{productCollectionID}/products": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerProduct"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/MetaWithFacets"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListProductCollectionEntries",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productCollectionID",
                        "in": "path",
                        "description": "ID of the product collection.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product collection entries visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerProduct"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/MetaWithFacets"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListProducts",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "query",
                        "description": "ID of the category.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "depth",
                        "in": "query",
                        "description": "Indicates how deep down the category hierarchy to return results. Valid values are a number of 1 or greater, or 'all'. Relative to CategoryID if specified, otherwise top level of the Catalog. Default is 'all'.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "name": "sellerID",
                        "in": "query",
                        "description": "ID of the seller.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a list of products visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products/{productID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BuyerProduct"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetProduct",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sellerID",
                        "in": "query",
                        "description": "ID of the seller.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single product.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products/{productID}/specs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Spec"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListSpecs",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of specs visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products/{productID}/specs/{specID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spec"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetSpec",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single spec.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products/{productID}/variants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Variant"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListVariants",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of variants visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/products/{productID}/variants/{variantID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetVariant",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single variant.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/promotions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Promotion"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListPromotions",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Code",
                                    "Description",
                                    "FinePrint",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "Code",
                                    "StartDate",
                                    "ExpirationDate",
                                    "EligibleExpression",
                                    "ValueExpression",
                                    "CanCombine",
                                    "!Name",
                                    "!ID",
                                    "!Code",
                                    "!StartDate",
                                    "!ExpirationDate",
                                    "!EligibleExpression",
                                    "!ValueExpression",
                                    "!CanCombine"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of promotions visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/promotions/{promotionID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Promotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetPromotion",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single promotion.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/register": {
            "put": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessTokenBasic"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.Register",
                "tags": [
                    "Me"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MeUser"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "anonUserToken",
                        "in": "query",
                        "description": "Anon user token of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Register a register.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/sellers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Organizations you can place orders directly to.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/BuyerSupplier"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListBuyerSellers",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of buyer sellers visible to this user.",
                "description": "Organizations you can place orders directly to.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/shipments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Shipment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListShipments",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "orderID",
                        "in": "query",
                        "description": "ID of the order.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateShipped",
                                    "DateDelivered",
                                    "TrackingNumber"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateShipped",
                                    "OwnerID",
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateDelivered",
                                    "Cost",
                                    "!DateShipped",
                                    "!OwnerID",
                                    "!ID",
                                    "!BuyerID",
                                    "!Shipper",
                                    "!DateDelivered",
                                    "!Cost"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of shipments visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/shipments/{shipmentID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetShipment",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single shipment.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/shipments/{shipmentID}/items": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ShipmentItem"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListShipmentItems",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "query",
                        "description": "ID of the order.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateShipped",
                                    "DateDelivered",
                                    "TrackingNumber"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateShipped",
                                    "OwnerID",
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateDelivered",
                                    "Cost",
                                    "!DateShipped",
                                    "!OwnerID",
                                    "!ID",
                                    "!BuyerID",
                                    "!Shipper",
                                    "!DateDelivered",
                                    "!Cost"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of shipment items visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/spendingAccounts": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SpendingAccount"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListSpendingAccounts",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "RedemptionCode"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of spending accounts visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/spendingaccounts/{spendingAccountID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpendingAccount"
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.GetSpendingAccount",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "spendingAccountID",
                        "in": "path",
                        "description": "ID of the spending account.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single spending account.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/me/usergroups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Only available to Buyer Users.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroup"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Me.ListUserGroups",
                "tags": [
                    "Me"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of user groups visible to this user.",
                "description": "Only available to Buyer Users.",
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "/messagesenders": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MessageSender"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.List",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "URL"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "URL",
                                    "!ID",
                                    "!Name",
                                    "!URL"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of message senders.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin",
                            "MessageSenderReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageSender"
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.Create",
                "tags": [
                    "Message Senders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MessageSender"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "MessageTypes",
                                    "URL",
                                    "SharedKey"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new message sender.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            }
        },
        "/messagesenders/{messageSenderID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageSender"
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.Get",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "messageSenderID",
                        "in": "path",
                        "description": "ID of the message sender.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single message sender.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin",
                            "MessageSenderReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageSender"
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.Save",
                "tags": [
                    "Message Senders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MessageSender"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "MessageTypes",
                                    "URL",
                                    "SharedKey"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "messageSenderID",
                        "in": "path",
                        "description": "ID of the message sender.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a message sender.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "MessageSenders.Delete",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "messageSenderID",
                        "in": "path",
                        "description": "ID of the message sender.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a message sender.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessageSender"
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.Patch",
                "tags": [
                    "Message Senders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MessageSender"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "messageSenderID",
                        "in": "path",
                        "description": "ID of the message sender.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a message sender.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            }
        },
        "/messagesenders/{messageSenderID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "MessageSenders.DeleteAssignment",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "messageSenderID",
                        "in": "path",
                        "description": "ID of the message sender.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a message sender assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageConfigAssignmentAdmin",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            }
        },
        "/messagesenders/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MessageSenderAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.ListAssignments",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "messageSenderID",
                        "in": "query",
                        "description": "ID of the message sender.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the message sender assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a list of message sender assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageConfigAssignmentAdmin",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "MessageSenders.SaveAssignment",
                "tags": [
                    "Message Senders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MessageSenderAssignment"
                                    }
                                ],
                                "required": [
                                    "MessageSenderID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a message sender assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageConfigAssignmentAdmin",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            }
        },
        "/messagesenders/CCListenerAssignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/MessageCCListenerAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "MessageSenders.ListCCListenerAssignments",
                "tags": [
                    "Message Senders"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "BuyerID",
                                    "UserGroupID",
                                    "UserID",
                                    "MessageConfigName",
                                    "SupplierID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "BuyerID",
                                    "UserGroupID",
                                    "UserID",
                                    "MessageConfigName",
                                    "SupplierID",
                                    "!BuyerID",
                                    "!UserGroupID",
                                    "!UserID",
                                    "!MessageConfigName",
                                    "!SupplierID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of message sender cc listener assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageConfigAssignmentAdmin",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "MessageSenders.SaveCCListenerAssignment",
                "tags": [
                    "Message Senders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MessageCCListenerAssignment"
                                    }
                                ],
                                "required": [
                                    "MessageSenderAssignment",
                                    "MessageType"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a message sender cc listener assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "MessageConfigAssignmentAdmin",
                            "MessageSenderAdmin"
                        ]
                    }
                ]
            }
        },
        "/openidconnects": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OpenIdConnect"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "OpenIdConnects.List",
                "tags": [
                    "Open Id Connects"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of OpenID Connects.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin",
                            "OpenIDConnectReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpenIdConnect"
                                }
                            }
                        }
                    }
                },
                "operationId": "OpenIdConnects.Create",
                "tags": [
                    "Open Id Connects"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OpenIdConnect"
                                    }
                                ],
                                "required": [
                                    "OrderCloudApiClientID",
                                    "ConnectClientID",
                                    "ConnectClientSecret",
                                    "AppStartUrl",
                                    "AuthorizationEndpoint",
                                    "TokenEndpoint"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new OpenID Connect.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin"
                        ]
                    }
                ]
            }
        },
        "/openidconnects/{openidconnectID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpenIdConnect"
                                }
                            }
                        }
                    }
                },
                "operationId": "OpenIdConnects.Get",
                "tags": [
                    "Open Id Connects"
                ],
                "parameters": [
                    {
                        "name": "openidconnectID",
                        "in": "path",
                        "description": "ID of the openidconnect.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single OpenID Connect.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin",
                            "OpenIDConnectReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpenIdConnect"
                                }
                            }
                        }
                    }
                },
                "operationId": "OpenIdConnects.Save",
                "tags": [
                    "Open Id Connects"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OpenIdConnect"
                                    }
                                ],
                                "required": [
                                    "OrderCloudApiClientID",
                                    "ConnectClientID",
                                    "ConnectClientSecret",
                                    "AppStartUrl",
                                    "AuthorizationEndpoint",
                                    "TokenEndpoint"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "openidconnectID",
                        "in": "path",
                        "description": "ID of the openidconnect.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a OpenID Connect.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "OpenIdConnects.Delete",
                "tags": [
                    "Open Id Connects"
                ],
                "parameters": [
                    {
                        "name": "openidconnectID",
                        "in": "path",
                        "description": "ID of the openidconnect.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a OpenID Connect.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OpenIdConnect"
                                }
                            }
                        }
                    }
                },
                "operationId": "OpenIdConnects.Patch",
                "tags": [
                    "Open Id Connects"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OpenIdConnect"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "openidconnectID",
                        "in": "path",
                        "description": "ID of the openidconnect.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a OpenID Connect.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OpenIDConnectAdmin"
                        ]
                    }
                ]
            }
        },
        "/orderreturns": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderReturn"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.List",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "approvable",
                        "in": "query",
                        "description": "Only returns orders awaiting the user's approval if true.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "OrderID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateSubmitted",
                                    "DateCreated",
                                    "ID",
                                    "OrderID",
                                    "DateApproved",
                                    "DateDeclined",
                                    "DateCanceled",
                                    "DateCompleted",
                                    "LastUpdated",
                                    "!DateSubmitted",
                                    "!DateCreated",
                                    "!ID",
                                    "!OrderID",
                                    "!DateApproved",
                                    "!DateDeclined",
                                    "!DateCanceled",
                                    "!DateCompleted",
                                    "!LastUpdated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order returns.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Create",
                "tags": [
                    "Order Returns"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderReturn"
                                    }
                                ],
                                "required": [
                                    "OrderID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new order return.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Get",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single order return.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Save",
                "tags": [
                    "Order Returns"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderReturn"
                                    }
                                ],
                                "required": [
                                    "OrderID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an order return.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "OrderReturns.Delete",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an order return.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Patch",
                "tags": [
                    "Order Returns"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderReturn"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an order return.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/approvals": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns all Approvals associated with the Order Return.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderReturnApproval"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.ListApprovals",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ApprovalRuleID",
                                    "ApprovingGroupID",
                                    "Approver",
                                    "Comments"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateCreated",
                                    "ApprovalRuleID",
                                    "ApprovingGroupID",
                                    "Status",
                                    "DateCompleted",
                                    "Approver",
                                    "!DateCreated",
                                    "!ApprovalRuleID",
                                    "!ApprovingGroupID",
                                    "!Status",
                                    "!DateCompleted",
                                    "!Approver"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order return approvals.",
                "description": "Returns all Approvals associated with the Order Return.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/approve": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Approve",
                "tags": [
                    "Order Returns"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApprovalInfo"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Approve an order return.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/cancel": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Cancel",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Cancel an OrderReturn.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/complete": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Use only when an order return won't have an associated payment. You will not to reopen an order return after completing it.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Complete",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Complete an OrderReturn.",
                "description": "Use only when an order return won't have an associated payment. You will not to reopen an order return after completing it.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/decline": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Decline",
                "tags": [
                    "Order Returns"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ApprovalInfo"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Decline an order return.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/eligibleapprovers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns all Users who can approve or decline this order return (but have not done so).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.ListEligibleApprovers",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order return eligible approvers.",
                "description": "Returns all Users who can approve or decline this order return (but have not done so).",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/items/{lineItemID}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.DeleteItem",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an order return item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orderreturns/{returnID}/submit": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderReturn"
                                }
                            }
                        }
                    }
                },
                "operationId": "OrderReturns.Submit",
                "tags": [
                    "Order Returns"
                ],
                "parameters": [
                    {
                        "name": "returnID",
                        "in": "path",
                        "description": "ID of the return.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Submit an order return submit.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Order"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.List",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Lower bound of date range that the order was created.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Upper bound of date range that the order was created.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "Comments"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateSubmitted",
                                    "DateCreated",
                                    "ID",
                                    "FromCompanyID",
                                    "ToCompanyID",
                                    "FromUserID",
                                    "Status",
                                    "DateApproved",
                                    "DateDeclined",
                                    "DateCanceled",
                                    "DateCompleted",
                                    "LastUpdated",
                                    "Subtotal",
                                    "ShippingCost",
                                    "TaxCost",
                                    "PromotionDiscount",
                                    "Total",
                                    "IsSubmitted",
                                    "!DateSubmitted",
                                    "!DateCreated",
                                    "!ID",
                                    "!FromCompanyID",
                                    "!ToCompanyID",
                                    "!FromUserID",
                                    "!Status",
                                    "!DateApproved",
                                    "!DateDeclined",
                                    "!DateCanceled",
                                    "!DateCompleted",
                                    "!LastUpdated",
                                    "!Subtotal",
                                    "!ShippingCost",
                                    "!TaxCost",
                                    "!PromotionDiscount",
                                    "!Total",
                                    "!IsSubmitted"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of orders.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Create",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    }
                ],
                "summary": "Create a new order.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Get",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Save",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an order.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Orders.Delete",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Patch",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/approvals": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns all Approvals associated with the Order.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderApproval"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.ListApprovals",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ApprovalRuleID",
                                    "ApprovingGroupID",
                                    "Approver",
                                    "Comments"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateCreated",
                                    "AllowResubmit",
                                    "ApprovalRuleID",
                                    "ApprovingGroupID",
                                    "Status",
                                    "DateCompleted",
                                    "Approver",
                                    "!DateCreated",
                                    "!AllowResubmit",
                                    "!ApprovalRuleID",
                                    "!ApprovingGroupID",
                                    "!Status",
                                    "!DateCompleted",
                                    "!Approver"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order approvals.",
                "description": "Returns all Approvals associated with the Order.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/approve": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Approve",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderApprovalInfo"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Approve an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/billto": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Use only when the address is not to be saved/reused..To use a saved address (i.e. from the Addresses resource), PATCH the order's BillingAddressID property instead.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.SetBillingAddress",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set a billing address.",
                "description": "Use only when the address is not to be saved/reused.<br/></br>To use a saved address (i.e. from the Addresses resource), PATCH the order's BillingAddressID property instead.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Not allowed on unsubmitted orders where BillingAddressID has been set. In that case, use the Addresses resource to update the saved address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.PatchBillingAddress",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an order billing address.",
                "description": "Not allowed on unsubmitted orders where BillingAddressID has been set. In that case, use the Addresses resource to update the saved address.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/calculate": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.Calculate",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Calculate an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/cancel": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Cancel",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Cancel an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/complete": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Use only when an order doesn't need a shipment. You will not be able to ship or reopen an order after completing it.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Complete",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Complete an order.",
                "description": "Use only when an order doesn't need a shipment. You will not be able to ship or reopen an order after completing it.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/decline": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Decline",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderApprovalInfo"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Decline an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/eligibleapprovers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Returns all Users who can approve or decline this order (but have not done so).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.ListEligibleApprovers",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order eligible approvers.",
                "description": "Returns all Users who can approve or decline this order (but have not done so).",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/estimateshipping": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.EstimateShipping",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Estimate shipping cost.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/forward": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Creates and submits 0 or more outgoing Orders to Suppliers, one for each unique Product.DefaultSupplierID on this Order.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderSplitResult"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Forward",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Forward an order.",
                "description": "Creates and submits 0 or more outgoing Orders to Suppliers, one for each unique Product.DefaultSupplierID on this Order.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/fromuser": {
            "patch": {
                "responses": {
                    "200": {
                        "description": "Only FirstName, LastName, and Email can be updated..Primarily used to facilitate guest checkout scenarios.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.PatchFromUser",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Override order creator details.",
                "description": "Only FirstName, LastName, and Email can be updated.<br/></br>Primarily used to facilitate guest checkout scenarios.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/lineitems": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LineItem"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.List",
                "tags": [
                    "Line Items"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateAdded",
                                    "ID",
                                    "ProductID",
                                    "!DateAdded",
                                    "!ID",
                                    "!ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of line items.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.Create",
                "tags": [
                    "Line Items"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ],
                                "required": [
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new line item.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/lineitems/{lineItemID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.Get",
                "tags": [
                    "Line Items"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.Save",
                "tags": [
                    "Line Items"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ],
                                "required": [
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a line item.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "LineItems.Delete",
                "tags": [
                    "Line Items"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.Patch",
                "tags": [
                    "Line Items"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/LineItem"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a line item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/lineitems/{lineItemID}/shipto": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Set the Shipping Address of the Line Item. Appropriate only when the Address is not to be saved/reused. To use a Saved Address (i.e. from the Addresses resource), PATCH the Line Item's ShippingAddressID property instead.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.SetShippingAddress",
                "tags": [
                    "Line Items"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set a shipping address.",
                "description": "Set the Shipping Address of the Line Item. Appropriate only when the Address is not to be saved/reused. To use a Saved Address (i.e. from the Addresses resource), PATCH the Line Item's ShippingAddressID property instead.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Partially update the Shipping Address of the Line Item. Not allowed on unsubmitted Line Items where ShippingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LineItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "LineItems.PatchShippingAddress",
                "tags": [
                    "Line Items"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a line item shipping address.",
                "description": "Partially update the Shipping Address of the Line Item. Not allowed on unsubmitted Line Items where ShippingAddressID has been set. In that case, use the Addresses resource to update the Saved Address.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/payments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Payment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Payments.List",
                "tags": [
                    "Payments"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateCreated",
                                    "ID",
                                    "Type",
                                    "CreditCardID",
                                    "SpendingAccountID",
                                    "!DateCreated",
                                    "!ID",
                                    "!Type",
                                    "!CreditCardID",
                                    "!SpendingAccountID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of payments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Payments.Create",
                "tags": [
                    "Payments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Payment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new payment.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/payments/{paymentID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Payments.Get",
                "tags": [
                    "Payments"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Payments.Delete",
                "tags": [
                    "Payments"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a payment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "PUT is not a supported method for payments due to the implications associated with modifying certain properties. Patch is only permitted on certain properties that vary depending on order status",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Payments.Patch",
                "tags": [
                    "Payments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Payment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a payment.",
                "description": "PUT is not a supported method for payments due to the implications associated with modifying certain properties. Patch is only permitted on certain properties that vary depending on order status",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/payments/{paymentID}/transactions": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Payment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Payments.CreateTransaction",
                "tags": [
                    "Payments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PaymentTransaction"
                                    }
                                ],
                                "required": [
                                    "Type",
                                    "DateExecuted"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new payment transaction.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/payments/{paymentID}/transactions/{transactionID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Payments.DeleteTransaction",
                "tags": [
                    "Payments"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "paymentID",
                        "in": "path",
                        "description": "ID of the payment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "transactionID",
                        "in": "path",
                        "description": "ID of the transaction.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a payment transaction.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/promotions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OrderPromotion"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.ListPromotions",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Code",
                                    "Description",
                                    "FinePrint",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "Code",
                                    "StartDate",
                                    "ExpirationDate",
                                    "EligibleExpression",
                                    "ValueExpression",
                                    "CanCombine",
                                    "!Name",
                                    "!ID",
                                    "!Code",
                                    "!StartDate",
                                    "!ExpirationDate",
                                    "!EligibleExpression",
                                    "!ValueExpression",
                                    "!CanCombine"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of order promotions.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/promotions/{promoCode}": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderPromotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.AddPromotion",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promoCode",
                        "in": "path",
                        "description": "Promo code of the order promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Add a promotion to an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.RemovePromotion",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promoCode",
                        "in": "path",
                        "description": "Promo code of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Remove a promotion from an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/ship": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Ship",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Shipment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new shipment containing all items on an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/shipments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Shipment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.ListShipments",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateShipped",
                                    "DateDelivered",
                                    "TrackingNumber"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateShipped",
                                    "OwnerID",
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateDelivered",
                                    "Cost",
                                    "!DateShipped",
                                    "!OwnerID",
                                    "!ID",
                                    "!BuyerID",
                                    "!Shipper",
                                    "!DateDelivered",
                                    "!Cost"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "List shipments for an order.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "ShipmentReader"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/shipmethods": {
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.SelectShipmethods",
                "tags": [
                    "Integration Events"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderShipMethodSelection"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Select a ship method.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/shipto": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the order's ShippingAddressID property instead. The address used will be populated on the ShippingAddress property of each LineItem.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.SetShippingAddress",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set a shipping address.",
                "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the order's ShippingAddressID property instead. The address used will be populated on the ShippingAddress property of each LineItem.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "Not allowed on unsubmitted orders where ShippingAddressID has been set. In that case, use the Addresses resource to update the saved address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.PatchShippingAddress",
                "tags": [
                    "Orders"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an order shipping address.",
                "description": "Not allowed on unsubmitted orders where ShippingAddressID has been set. In that case, use the Addresses resource to update the saved address.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/split": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Creates, but does not submit, 0 or more outgoing Orders to Suppliers, one for each unique Product.DefaultSupplierID on this Order.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderSplitResult"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Split",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Split an order.",
                "description": "Creates, but does not submit, 0 or more outgoing Orders to Suppliers, one for each unique Product.DefaultSupplierID on this Order.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/submit": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Order"
                                }
                            }
                        }
                    }
                },
                "operationId": "Orders.Submit",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Submit an order submit.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/validate": {
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Orders.Validate",
                "tags": [
                    "Orders"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Validate an order in its current state.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/orders/{direction}/{orderID}/worksheet": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderWorksheet"
                                }
                            }
                        }
                    }
                },
                "operationId": "IntegrationEvents.GetWorksheet",
                "tags": [
                    "Integration Events"
                ],
                "parameters": [
                    {
                        "name": "direction",
                        "in": "path",
                        "description": "Direction of the order, from the current user's perspective. Possible values: incoming, outgoing, all.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/OrderDirection"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single order worksheet.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "IntegrationEventAdmin",
                            "OrderAdmin",
                            "Shopper",
                            "OrderReader"
                        ]
                    }
                ]
            }
        },
        "/password/reset": {
            "post": {
                "responses": {
                    "204": {
                        "description": "Sends a temporary verification code via email, which must subsequently be passed in a Reset Password call. The verification code expires in 120 minutes."
                    }
                },
                "operationId": "PasswordResets.SendVerificationCode",
                "tags": [
                    "Forgotten Password"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PasswordResetRequest"
                                    }
                                ],
                                "required": [
                                    "ClientID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Send a verification code.",
                "description": "Sends a temporary verification code via email, which must subsequently be passed in a Reset Password call. The verification code expires in 120 minutes.",
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "/password/reset/{verificationCode}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "PasswordResets.ResetPasswordByVerificationCode",
                "tags": [
                    "Forgotten Password"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PasswordReset"
                                    }
                                ],
                                "required": [
                                    "ClientID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "verificationCode",
                        "in": "path",
                        "description": "Verification code of the password reset.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Reset a password by verification code.",
                "description": "",
                "security": [
                    {
                        "OAuth2": []
                    }
                ]
            }
        },
        "/priceschedules": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PriceSchedule"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.List",
                "tags": [
                    "Price Schedules"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "ApplyTax",
                                    "Currency"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "OwnerID",
                                    "!Name",
                                    "!ID",
                                    "!OwnerID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of price schedules.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin",
                            "PriceScheduleReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PriceSchedule"
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.Create",
                "tags": [
                    "Price Schedules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PriceSchedule"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new price schedule.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            }
        },
        "/priceschedules/{priceScheduleID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PriceSchedule"
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.Get",
                "tags": [
                    "Price Schedules"
                ],
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single price schedule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin",
                            "PriceScheduleReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PriceSchedule"
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.Save",
                "tags": [
                    "Price Schedules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PriceSchedule"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a price schedule.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "PriceSchedules.Delete",
                "tags": [
                    "Price Schedules"
                ],
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a price schedule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PriceSchedule"
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.Patch",
                "tags": [
                    "Price Schedules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PriceSchedule"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a price schedule.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            }
        },
        "/priceschedules/{priceScheduleID}/PriceBreaks": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PriceSchedule"
                                }
                            }
                        }
                    }
                },
                "operationId": "PriceSchedules.SavePriceBreak",
                "tags": [
                    "Price Schedules"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PriceBreak"
                                    }
                                ],
                                "required": [
                                    "Quantity",
                                    "Price"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a price schedule price break.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "PriceSchedules.DeletePriceBreak",
                "tags": [
                    "Price Schedules"
                ],
                "parameters": [
                    {
                        "name": "priceScheduleID",
                        "in": "path",
                        "description": "ID of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "quantity",
                        "in": "query",
                        "description": "Quantity of the price schedule.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Delete a price schedule price break.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PriceScheduleAdmin"
                        ]
                    }
                ]
            }
        },
        "/productfacets": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductFacet"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "ProductFacets.List",
                "tags": [
                    "Product Facets"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "XpPath"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ListOrder",
                                    "ID",
                                    "Name",
                                    "XpPath",
                                    "!ListOrder",
                                    "!ID",
                                    "!Name",
                                    "!XpPath"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product facets.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin",
                            "ProductFacetReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductFacet"
                                }
                            }
                        }
                    }
                },
                "operationId": "ProductFacets.Create",
                "tags": [
                    "Product Facets"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductFacet"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new product facet.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin"
                        ]
                    }
                ]
            }
        },
        "/productfacets/{productFacetID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductFacet"
                                }
                            }
                        }
                    }
                },
                "operationId": "ProductFacets.Get",
                "tags": [
                    "Product Facets"
                ],
                "parameters": [
                    {
                        "name": "productFacetID",
                        "in": "path",
                        "description": "ID of the product facet.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single product facet.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin",
                            "ProductFacetReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductFacet"
                                }
                            }
                        }
                    }
                },
                "operationId": "ProductFacets.Save",
                "tags": [
                    "Product Facets"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductFacet"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productFacetID",
                        "in": "path",
                        "description": "ID of the product facet.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a product facet.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ProductFacets.Delete",
                "tags": [
                    "Product Facets"
                ],
                "parameters": [
                    {
                        "name": "productFacetID",
                        "in": "path",
                        "description": "ID of the product facet.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a product facet.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductFacet"
                                }
                            }
                        }
                    }
                },
                "operationId": "ProductFacets.Patch",
                "tags": [
                    "Product Facets"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductFacet"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productFacetID",
                        "in": "path",
                        "description": "ID of the product facet.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a product facet.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductFacetAdmin"
                        ]
                    }
                ]
            }
        },
        "/products": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Product"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/MetaWithFacets"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.List",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "catalogID",
                        "in": "query",
                        "description": "ID of the catalog.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "categoryID",
                        "in": "query",
                        "description": "ID of the category.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "searchType",
                        "in": "query",
                        "description": "Type of search to perform. Possible values: AnyTerm (default), AllTermsAnyField, AllTermsSameField, ExactPhrase, ExactPhrasePrefix.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/SearchType"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "OwnerID",
                                    "Name",
                                    "ID",
                                    "!OwnerID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of products.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.Create",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new product.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.Get",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single product.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.Save",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a product.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Products.Delete",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a product.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.Patch",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a product.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/assignments/{buyerID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Products.DeleteAssignment",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sellerID",
                        "in": "query",
                        "description": "ID of the seller.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductAssignmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/inventoryrecords": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryRecord"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.List",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressID",
                                    "!ID",
                                    "!AddressID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of inventory records.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.Create",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ],
                                "required": [
                                    "AddressID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new inventory record.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/inventoryrecords/{inventoryRecordID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.Get",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single inventory record.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.Save",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ],
                                "required": [
                                    "AddressID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an inventory record.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "InventoryRecords.Delete",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an inventory record.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.Patch",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an inventory record.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/specs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Spec"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.ListSpecs",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ListOrder",
                                    "Name",
                                    "ID",
                                    "!ListOrder",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product specs.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/suppliers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductSupplier"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.ListSuppliers",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "DateCreated",
                                    "!ID",
                                    "!Name",
                                    "!DateCreated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product suppliers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/suppliers/{supplierID}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Products.SaveSupplier",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "defaultPriceScheduleID",
                        "in": "query",
                        "description": "ID of the default price schedule.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a product supplier.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Products.RemoveSupplier",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Remove a product supplier.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/variants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Variant"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.ListVariants",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "!ID",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of product variants.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/variants/{variantID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.GetVariant",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single product variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "Update a product variant.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.SaveVariant",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Variant"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Update a product variant.",
                "description": "Update a product variant.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.PatchVariant",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Variant"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a product variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/variants/{variantID}/inventoryrecords": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/InventoryRecord"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.ListVariant",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressID",
                                    "!ID",
                                    "!AddressID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of inventory record variants.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.CreateVariant",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ],
                                "required": [
                                    "AddressID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new inventory record variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/variants/{variantID}/inventoryrecords/{inventoryRecordID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.GetVariant",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single inventory record variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.SaveVariant",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ],
                                "required": [
                                    "AddressID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an inventory record variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "InventoryRecords.DeleteVariant",
                "tags": [
                    "Inventory Records"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an inventory record variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InventoryRecord"
                                }
                            }
                        }
                    }
                },
                "operationId": "InventoryRecords.PatchVariant",
                "tags": [
                    "Inventory Records"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/InventoryRecord"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variantID",
                        "in": "path",
                        "description": "ID of the variant.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "inventoryRecordID",
                        "in": "path",
                        "description": "ID of the inventory record.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an inventory record variant.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/{productID}/variants/generate": {
            "post": {
                "responses": {
                    "201": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Product"
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.GenerateVariants",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "overwriteExisting",
                        "in": "query",
                        "description": "Overwrite existing of the product.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "summary": "Generate a variants.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/products/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ProductAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Products.ListAssignments",
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "name": "productID",
                        "in": "query",
                        "description": "ID of the product.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "priceScheduleID",
                        "in": "query",
                        "description": "ID of the price schedule.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the product assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of product assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductAssignmentAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Products.SaveAssignment",
                "tags": [
                    "Products"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ProductAssignment"
                                    }
                                ],
                                "required": [
                                    "ProductID",
                                    "BuyerID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductAssignmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/promotions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Promotion"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.List",
                "tags": [
                    "Promotions"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Code",
                                    "Description",
                                    "FinePrint",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "Code",
                                    "StartDate",
                                    "ExpirationDate",
                                    "EligibleExpression",
                                    "ValueExpression",
                                    "CanCombine",
                                    "!Name",
                                    "!ID",
                                    "!Code",
                                    "!StartDate",
                                    "!ExpirationDate",
                                    "!EligibleExpression",
                                    "!ValueExpression",
                                    "!CanCombine"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of promotions.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin",
                            "PromotionReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Promotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.Create",
                "tags": [
                    "Promotions"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Promotion"
                                    }
                                ],
                                "required": [
                                    "Code",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new promotion.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            }
        },
        "/promotions/{promotionID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Promotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.Get",
                "tags": [
                    "Promotions"
                ],
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single promotion.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin",
                            "PromotionReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Promotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.Save",
                "tags": [
                    "Promotions"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Promotion"
                                    }
                                ],
                                "required": [
                                    "Code",
                                    "EligibleExpression",
                                    "ValueExpression"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a promotion.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Promotions.Delete",
                "tags": [
                    "Promotions"
                ],
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a promotion.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Promotion"
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.Patch",
                "tags": [
                    "Promotions"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Promotion"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a promotion.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            }
        },
        "/promotions/{promotionID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Promotions.DeleteAssignment",
                "tags": [
                    "Promotions"
                ],
                "parameters": [
                    {
                        "name": "promotionID",
                        "in": "path",
                        "description": "ID of the promotion.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a promotion assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            }
        },
        "/promotions/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PromotionAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Promotions.ListAssignments",
                "tags": [
                    "Promotions"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "promotionID",
                        "in": "query",
                        "description": "ID of the promotion.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the promotion assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of promotion assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin",
                            "PromotionReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Promotions.SaveAssignment",
                "tags": [
                    "Promotions"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PromotionAssignment"
                                    }
                                ],
                                "required": [
                                    "PromotionID",
                                    "BuyerID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a promotion assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "PromotionAdmin"
                        ]
                    }
                ]
            }
        },
        "/securityprofiles": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SecurityProfile"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.List",
                "tags": [
                    "Security Profiles"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "!ID",
                                    "!Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of security profiles.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile",
                            "SecurityProfileReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityProfile"
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.Create",
                "tags": [
                    "Security Profiles"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SecurityProfile"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new security profile.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/securityprofiles/{securityProfileID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityProfile"
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.Get",
                "tags": [
                    "Security Profiles"
                ],
                "parameters": [
                    {
                        "name": "securityProfileID",
                        "in": "path",
                        "description": "ID of the security profile.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single security profile.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile",
                            "SecurityProfileReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityProfile"
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.Save",
                "tags": [
                    "Security Profiles"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SecurityProfile"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "securityProfileID",
                        "in": "path",
                        "description": "ID of the security profile.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a security profile.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SecurityProfiles.Delete",
                "tags": [
                    "Security Profiles"
                ],
                "parameters": [
                    {
                        "name": "securityProfileID",
                        "in": "path",
                        "description": "ID of the security profile.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a security profile.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SecurityProfile"
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.Patch",
                "tags": [
                    "Security Profiles"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SecurityProfile"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "securityProfileID",
                        "in": "path",
                        "description": "ID of the security profile.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a security profile.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/securityprofiles/{securityProfileID}/assignments": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SecurityProfiles.DeleteAssignment",
                "tags": [
                    "Security Profiles"
                ],
                "parameters": [
                    {
                        "name": "securityProfileID",
                        "in": "path",
                        "description": "ID of the security profile.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a security profile assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/securityprofiles/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SecurityProfileAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SecurityProfiles.ListAssignments",
                "tags": [
                    "Security Profiles"
                ],
                "parameters": [
                    {
                        "name": "buyerID",
                        "in": "query",
                        "description": "ID of the buyer.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "query",
                        "description": "ID of the supplier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "securityProfileID",
                        "in": "query",
                        "description": "ID of the security profile.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "commerceRole",
                        "in": "query",
                        "description": "Commerce role of the security profile assignment. Possible values: Buyer, Seller, Supplier.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CommerceRole"
                        }
                    },
                    {
                        "name": "level",
                        "in": "query",
                        "description": "Level of the security profile assignment. Possible values: User, Group, Company.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/PartyType"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of security profile assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SecurityProfiles.SaveAssignment",
                "tags": [
                    "Security Profiles"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SecurityProfileAssignment"
                                    }
                                ],
                                "required": [
                                    "SecurityProfileID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a security profile assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SecurityProfileAdmin",
                            "SetSecurityProfile"
                        ]
                    }
                ]
            }
        },
        "/shipments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Shipment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.List",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "orderID",
                        "in": "query",
                        "description": "ID of the order.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateShipped",
                                    "DateDelivered",
                                    "TrackingNumber"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "DateShipped",
                                    "OwnerID",
                                    "ID",
                                    "BuyerID",
                                    "Shipper",
                                    "DateDelivered",
                                    "Cost",
                                    "!DateShipped",
                                    "!OwnerID",
                                    "!ID",
                                    "!BuyerID",
                                    "!Shipper",
                                    "!DateDelivered",
                                    "!Cost"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of shipments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin",
                            "ShipmentReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.Create",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Shipment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new shipment.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/shipments/{shipmentID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.Get",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single shipment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin",
                            "ShipmentReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.Save",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Shipment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a shipment.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Shipments.Delete",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a shipment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.Patch",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Shipment"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a shipment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/shipments/{shipmentID}/items": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ShipmentItem"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.ListItems",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": []
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": []
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of shipment items.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin",
                            "ShipmentReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShipmentItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.SaveItem",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ShipmentItem"
                                    }
                                ],
                                "required": [
                                    "OrderID",
                                    "LineItemID",
                                    "QuantityShipped"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a shipment item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/shipments/{shipmentID}/items/{orderID}/{lineItemID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ShipmentItem"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.GetItem",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single shipment item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin",
                            "ShipmentReader"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Shipments.DeleteItem",
                "tags": [
                    "Shipments"
                ],
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "orderID",
                        "in": "path",
                        "description": "ID of the order.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lineItemID",
                        "in": "path",
                        "description": "ID of the line item.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a shipment item.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/shipments/{shipmentID}/shipfrom": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the shipment's FromAddressID property instead.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.SetShipFromAddress",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set a ship from address.",
                "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the shipment's FromAddressID property instead.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/shipments/{shipmentID}/shipto": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the shipment's ToAddressID property instead.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Shipment"
                                }
                            }
                        }
                    }
                },
                "operationId": "Shipments.SetShipToAddress",
                "tags": [
                    "Shipments"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "shipmentID",
                        "in": "path",
                        "description": "ID of the shipment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Set a ship to address.",
                "description": "Use only when the address is not to be saved/reused. To use a saved address (i.e. from the Addresses resource), PATCH the shipment's ToAddressID property instead.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ShipmentAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Spec"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.List",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ListOrder",
                                    "Name",
                                    "ID",
                                    "!ListOrder",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of specs.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spec"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.Create",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Spec"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new spec.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs/{specID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spec"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.Get",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single spec.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spec"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.Save",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Spec"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a spec.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Specs.Delete",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a spec.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Spec"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.Patch",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Spec"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a spec.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs/{specID}/options": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SpecOption"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.ListOptions",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Value",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ListOrder",
                                    "ID",
                                    "!ListOrder",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of spec options.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "A Spec can have multiple Options-- for example, if the spec is called 'Color', the options might be 'Blue', 'Red', and 'Green'. ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpecOption"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.CreateOption",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpecOption"
                                    }
                                ],
                                "required": [
                                    "Value"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new spec option.",
                "description": "A Spec can have multiple Options-- for example, if the spec is called 'Color', the options might be 'Blue', 'Red', and 'Green'. ",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs/{specID}/options/{optionID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpecOption"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.GetOption",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "optionID",
                        "in": "path",
                        "description": "ID of the option.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single spec option.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpecOption"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.SaveOption",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpecOption"
                                    }
                                ],
                                "required": [
                                    "Value"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "optionID",
                        "in": "path",
                        "description": "ID of the option.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a spec option.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Specs.DeleteOption",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "optionID",
                        "in": "path",
                        "description": "ID of the option.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a spec option.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SpecOption"
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.PatchOption",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpecOption"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "optionID",
                        "in": "path",
                        "description": "ID of the option.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a spec option.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs/{specID}/productassignments/{productID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Specs.DeleteProductAssignment",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "specID",
                        "in": "path",
                        "description": "ID of the spec.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "productID",
                        "in": "path",
                        "description": "ID of the product.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a spec product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/specs/productassignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SpecProductAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Specs.ListProductAssignments",
                "tags": [
                    "Specs"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SpecID",
                                    "ProductID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "SpecID",
                                    "ProductID",
                                    "DefaultOptionID",
                                    "DefaultValue",
                                    "!SpecID",
                                    "!ProductID",
                                    "!DefaultOptionID",
                                    "!DefaultValue"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of spec product assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin",
                            "ProductReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Specs.SaveProductAssignment",
                "tags": [
                    "Specs"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/SpecProductAssignment"
                                    }
                                ],
                                "required": [
                                    "SpecID",
                                    "ProductID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update a spec product assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ProductAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Supplier"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.List",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "DateCreated",
                                    "!ID",
                                    "!Name",
                                    "!DateCreated"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of suppliers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin",
                            "SupplierReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.Create",
                "tags": [
                    "Suppliers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Supplier"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new supplier.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.Get",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single supplier.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin",
                            "SupplierReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.Save",
                "tags": [
                    "Suppliers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Supplier"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Suppliers.Delete",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Supplier"
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.Patch",
                "tags": [
                    "Suppliers"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Supplier"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a supplier.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/addresses": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Address"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierAddresses.List",
                "tags": [
                    "Supplier Addresses"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "AddressName",
                                    "CompanyName",
                                    "City",
                                    "Street1",
                                    "Street2",
                                    "LastName",
                                    "FirstName",
                                    "State",
                                    "Zip"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "AddressName",
                                    "ID",
                                    "DateCreated",
                                    "CompanyName",
                                    "FirstName",
                                    "LastName",
                                    "Street1",
                                    "Street2",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country",
                                    "Phone",
                                    "!AddressName",
                                    "!ID",
                                    "!DateCreated",
                                    "!CompanyName",
                                    "!FirstName",
                                    "!LastName",
                                    "!Street1",
                                    "!Street2",
                                    "!City",
                                    "!State",
                                    "!Zip",
                                    "!Country",
                                    "!Phone"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of supplier addresses.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin",
                            "SupplierAddressReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierAddresses.Create",
                "tags": [
                    "Supplier Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new supplier address.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/addresses/{addressID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierAddresses.Get",
                "tags": [
                    "Supplier Addresses"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single supplier address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin",
                            "SupplierAddressReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierAddresses.Save",
                "tags": [
                    "Supplier Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ],
                                "required": [
                                    "Street1",
                                    "City",
                                    "State",
                                    "Zip",
                                    "Country"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier address.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SupplierAddresses.Delete",
                "tags": [
                    "Supplier Addresses"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Address"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierAddresses.Patch",
                "tags": [
                    "Supplier Addresses"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Address"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "addressID",
                        "in": "path",
                        "description": "ID of the address.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a supplier address.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAddressAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/ApiClients/Assignments/{apiClientID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "ApiClients.DeleteSupplierAssignment",
                "tags": [
                    "Api Clients"
                ],
                "parameters": [
                    {
                        "name": "apiClientID",
                        "in": "path",
                        "description": "ID of the api client.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a API client supplier assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "ApiClientAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/buyers": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/SupplierBuyer"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Suppliers.ListBuyers",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of supplier buyers.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin",
                            "SupplierReader"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/buyers/{buyerID}": {
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Suppliers.SaveBuyer",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Suppliers.DeleteBuyer",
                "tags": [
                    "Suppliers"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "buyerID",
                        "in": "path",
                        "description": "ID of the buyer.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier buyer.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/usergroups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroup"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.List",
                "tags": [
                    "Supplier User Groups"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of supplier user groups.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin",
                            "SupplierUserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.Create",
                "tags": [
                    "Supplier User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new supplier user group.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/usergroups/{userGroupID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.Get",
                "tags": [
                    "Supplier User Groups"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single supplier user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin",
                            "SupplierUserGroupReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.Save",
                "tags": [
                    "Supplier User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier user group.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SupplierUserGroups.Delete",
                "tags": [
                    "Supplier User Groups"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.Patch",
                "tags": [
                    "Supplier User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a supplier user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/usergroups/{userGroupID}/assignments/{userID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SupplierUserGroups.DeleteUserAssignment",
                "tags": [
                    "Supplier User Groups"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/usergroups/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroupAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUserGroups.ListUserAssignments",
                "tags": [
                    "Supplier User Groups"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of supplier user group user assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin",
                            "SupplierUserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SupplierUserGroups.SaveUserAssignment",
                "tags": [
                    "Supplier User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroupAssignment"
                                    }
                                ],
                                "required": [
                                    "UserGroupID",
                                    "UserID"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUsers.List",
                "tags": [
                    "Supplier Users"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Username",
                                    "LastName",
                                    "FirstName",
                                    "Email"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "LastName",
                                    "FirstName",
                                    "Username",
                                    "ID",
                                    "Email",
                                    "DateCreated",
                                    "PasswordLastSetDate",
                                    "!LastName",
                                    "!FirstName",
                                    "!Username",
                                    "!ID",
                                    "!Email",
                                    "!DateCreated",
                                    "!PasswordLastSetDate"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of supplier users.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin",
                            "SupplierUserReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUsers.Create",
                "tags": [
                    "Supplier Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create a new supplier user.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/suppliers/{supplierID}/users/{userID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUsers.Get",
                "tags": [
                    "Supplier Users"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single supplier user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin",
                            "SupplierUserReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUsers.Save",
                "tags": [
                    "Supplier Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ],
                                "required": [
                                    "Username",
                                    "FirstName",
                                    "LastName",
                                    "Email",
                                    "Active"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a supplier user.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "SupplierUsers.Delete",
                "tags": [
                    "Supplier Users"
                ],
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a supplier user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                },
                "operationId": "SupplierUsers.Patch",
                "tags": [
                    "Supplier Users"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/User"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "supplierID",
                        "in": "path",
                        "description": "ID of the supplier.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a supplier user.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "SupplierUserAdmin"
                        ]
                    }
                ]
            }
        },
        "/usergroups": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroup"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.List",
                "tags": [
                    "Admin User Groups"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of admin user groups.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin",
                            "AdminUserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.Create",
                "tags": [
                    "Admin User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new admin user group.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/usergroups/{userGroupID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.Get",
                "tags": [
                    "Admin User Groups"
                ],
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single admin user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin",
                            "AdminUserGroupReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.Save",
                "tags": [
                    "Admin User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ],
                                "required": [
                                    "Name"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update an admin user group.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "AdminUserGroups.Delete",
                "tags": [
                    "Admin User Groups"
                ],
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an admin user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserGroup"
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.Patch",
                "tags": [
                    "Admin User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroup"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update an admin user group.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/usergroups/{userGroupID}/assignments/{userID}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "AdminUserGroups.DeleteUserAssignment",
                "tags": [
                    "Admin User Groups"
                ],
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "path",
                        "description": "ID of the user group.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "path",
                        "description": "ID of the user.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete an admin user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/usergroups/assignments": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserGroupAssignment"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "AdminUserGroups.ListUserAssignments",
                "tags": [
                    "Admin User Groups"
                ],
                "parameters": [
                    {
                        "name": "userGroupID",
                        "in": "query",
                        "description": "ID of the user group.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "userID",
                        "in": "query",
                        "description": "ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "summary": "Get a list of admin user group user assignments.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin",
                            "AdminUserGroupReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "AdminUserGroups.SaveUserAssignment",
                "tags": [
                    "Admin User Groups"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/UserGroupAssignment"
                                    }
                                ],
                                "required": [
                                    "UserGroupID",
                                    "UserID"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or update an admin user group user assignment.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "AdminUserGroupAdmin"
                        ]
                    }
                ]
            }
        },
        "/webhooks": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Webhook"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "Webhooks.List",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ID",
                                    "Name",
                                    "Description",
                                    "Url"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "Name",
                                    "ID",
                                    "!Name",
                                    "!ID"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of webhooks.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin",
                            "WebhookReader"
                        ]
                    }
                ]
            },
            "post": {
                "responses": {
                    "201": {
                        "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                },
                "operationId": "Webhooks.Create",
                "tags": [
                    "Webhooks"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Webhook"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "Url",
                                    "HashKey"
                                ]
                            }
                        }
                    }
                },
                "summary": "Create a new webhook.",
                "description": "If ID is provided and an object with that ID already exists, a 409 (conflict) error is returned.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin"
                        ]
                    }
                ]
            }
        },
        "/webhooks/{webhookID}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                },
                "operationId": "Webhooks.Get",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookID",
                        "in": "path",
                        "description": "ID of the webhook.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Get a single webhook.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin",
                            "WebhookReader"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "200": {
                        "description": "If an object with the same ID already exists, it will be overwritten.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                },
                "operationId": "Webhooks.Save",
                "tags": [
                    "Webhooks"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Webhook"
                                    }
                                ],
                                "required": [
                                    "Name",
                                    "Url",
                                    "HashKey"
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "webhookID",
                        "in": "path",
                        "description": "ID of the webhook.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Create or update a webhook.",
                "description": "If an object with the same ID already exists, it will be overwritten.",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin"
                        ]
                    }
                ]
            },
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "Webhooks.Delete",
                "tags": [
                    "Webhooks"
                ],
                "parameters": [
                    {
                        "name": "webhookID",
                        "in": "path",
                        "description": "ID of the webhook.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a webhook.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin"
                        ]
                    }
                ]
            },
            "patch": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Webhook"
                                }
                            }
                        }
                    }
                },
                "operationId": "Webhooks.Patch",
                "tags": [
                    "Webhooks"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Webhook"
                                    }
                                ]
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "webhookID",
                        "in": "path",
                        "description": "ID of the webhook.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Partially update a webhook.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "WebhookAdmin"
                        ]
                    }
                ]
            }
        },
        "/xpindices": {
            "get": {
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "Items": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/XpIndex"
                                            }
                                        },
                                        "Meta": {
                                            "$ref": "#/components/schemas/Meta"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "operationId": "XpIndices.List",
                "tags": [
                    "Xp Indices"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "description": "Word or phrase to search for.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "searchOn",
                        "in": "query",
                        "description": "Comma-delimited list of fields to search on.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ThingType",
                                    "Key"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "description": "Comma-delimited list of fields to sort by.",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ThingType",
                                    "Key",
                                    "!ThingType",
                                    "!Key"
                                ]
                            }
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of results to return. Default: 1. When paginating through many items (> page 30), we recommend the \"Last ID\" method, as outlined in the Advanced Querying documentation.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "Number of results to return per page. Default: 20, max: 100.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "description": "An object or dictionary representing key/value pairs to apply as filters. Valid keys are top-level properties of the returned model or 'xp.???'",
                        "required": false,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "summary": "Get a list of XP indices.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "XpIndexAdmin"
                        ]
                    }
                ]
            },
            "put": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "XpIndices.Put",
                "tags": [
                    "Xp Indices"
                ],
                "requestBody": {
                    "required": true,
                    "description": "",
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/XpIndex"
                                    }
                                ]
                            }
                        }
                    }
                },
                "summary": "Create or Update an XP index.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "XpIndexAdmin"
                        ]
                    }
                ]
            }
        },
        "/xpindices/{thingType}/{key}": {
            "delete": {
                "responses": {
                    "204": {
                        "description": ""
                    }
                },
                "operationId": "XpIndices.Delete",
                "tags": [
                    "Xp Indices"
                ],
                "parameters": [
                    {
                        "name": "thingType",
                        "in": "path",
                        "description": "Thing type of the xp index. Possible values: Address, Variant, Order, OrderReturn, LineItem, CostCenter, CreditCard, Payment, Spec, SpecOption, UserGroup, Company, Category, PriceSchedule, Shipment, SpendingAccount, User, Promotion, ApprovalRule, SellerApprovalRule, Catalog, ProductFacet, MessageSender, InventoryRecord, ProductCollection.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/XpThingType"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Key of the xp index.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "summary": "Delete a XP index.",
                "description": "",
                "security": [
                    {
                        "OAuth2": [
                            "FullAccess",
                            "XpIndexAdmin"
                        ]
                    }
                ]
            }
        }
    }
}